<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="utils-test_8hpp" kind="file">
    <compoundname>utils-test.hpp</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">iostream</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includedby refid="ntt_8hpp" local="yes">ntt.hpp</includedby>
    <incdepgraph>
      <node id="244">
        <label>limits</label>
      </node>
      <node id="241">
        <label>cstdint</label>
      </node>
      <node id="239">
        <label>cmath</label>
      </node>
      <node id="238">
        <label>utils-test.hpp</label>
        <link refid="utils-test.hpp"/>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
      </node>
      <node id="247">
        <label>vector</label>
      </node>
      <node id="246">
        <label>utility</label>
      </node>
      <node id="242">
        <label>cstdlib</label>
      </node>
      <node id="243">
        <label>iostream</label>
      </node>
      <node id="240">
        <label>cstddef</label>
      </node>
      <node id="245">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="249">
        <label>ntt.hpp</label>
        <link refid="ntt_8hpp"/>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
      </node>
      <node id="250">
        <label>test_fwd_ntt.cpp</label>
        <link refid="test__fwd__ntt_8cpp"/>
      </node>
      <node id="248">
        <label>utils-test.hpp</label>
        <link refid="utils-test.hpp"/>
        <childnode refid="249" relation="include">
        </childnode>
      </node>
      <node id="251">
        <label>test_inv_ntt.cpp</label>
        <link refid="test__inv__ntt_8cpp"/>
      </node>
      <node id="252">
        <label>ntt.cpp</label>
        <link refid="ntt_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structhetest_1_1utils_1_1AllocatorBase" prot="public">hetest::utils::AllocatorBase</innerclass>
    <innerclass refid="structhetest_1_1utils_1_1AllocatorInterface" prot="public">hetest::utils::AllocatorInterface</innerclass>
    <innerclass refid="structhetest_1_1utils_1_1details_1_1MallocStrategy" prot="public">hetest::utils::details::MallocStrategy</innerclass>
    <innerclass refid="structhetest_1_1utils_1_1details_1_1CustomAllocStrategy" prot="public">hetest::utils::details::CustomAllocStrategy</innerclass>
    <innerclass refid="classhetest_1_1utils_1_1AlignedAllocator" prot="public">hetest::utils::AlignedAllocator</innerclass>
    <innerclass refid="structhetest_1_1utils_1_1AlignedAllocator_1_1rebind" prot="public">hetest::utils::AlignedAllocator::rebind</innerclass>
    <innernamespace refid="namespacehetest">hetest</innernamespace>
    <innernamespace refid="namespacehetest_1_1utils">hetest::utils</innernamespace>
    <innernamespace refid="namespacehetest_1_1utils_1_1details">hetest::utils::details</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" prot="public" static="no">
        <name>UTILS_CHECK</name>
        <param><defname>cond</defname></param>
        <param><defname>expr</defname></param>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/tests/test_utils/utils-test.hpp" line="81" column="9" bodyfile="/disk1/ymeng12/hexl-fpga/tests/test_utils/utils-test.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="utils-test_8hpp_1a211847bac88927d6b3426fc78dc052be" prot="public" static="no">
        <name>UTILS_CHECK_BOUNDS</name>
        <param><defname>...</defname></param>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/tests/test_utils/utils-test.hpp" line="83" column="9" bodyfile="/disk1/ymeng12/hexl-fpga/tests/test_utils/utils-test.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="utils-test_8hpp_1ab6c6bc8799eef1e3d4adc2bd1972e88b" prot="public" static="no" mutable="no">
        <type>__extension__ typedef __int128</type>
        <definition>__extension__ typedef __int128 int128_t</definition>
        <argsstring></argsstring>
        <name>int128_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/tests/test_utils/utils-test.hpp" line="15" column="1" bodyfile="/disk1/ymeng12/hexl-fpga/tests/test_utils/utils-test.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" prot="public" static="no" mutable="no">
        <type>__extension__ typedef unsigned __int128</type>
        <definition>__extension__ typedef unsigned __int128 uint128_t</definition>
        <argsstring></argsstring>
        <name>uint128_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/tests/test_utils/utils-test.hpp" line="16" column="1" bodyfile="/disk1/ymeng12/hexl-fpga/tests/test_utils/utils-test.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="utils-test_8hpp_1ab6c6bc8799eef1e3d4adc2bd1972e88b" refkind="member"><highlight class="normal">__extension__<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>__int128<sp/><ref refid="utils-test_8hpp_1ab6c6bc8799eef1e3d4adc2bd1972e88b" kindref="member">int128_t</ref>;</highlight></codeline>
<codeline lineno="16" refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" refkind="member"><highlight class="normal">__extension__<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int128<sp/><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hetest<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TRUE<sp/><sp/><sp/>//<sp/>MSVC<sp/>defines<sp/>TRUE</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>FALSE<sp/><sp/>//<sp/>MSVC<sp/>defines<sp/>FALSE</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="26" refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8" refkind="member"><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8" kindref="member">CMPINT</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8a2dcbad7477fd40561e8b8198f173bd47" kindref="member">EQ</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ac562607189d77eb9dfb707464c1e7b0b" kindref="member">LT</ref><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8acfe6055d2e0503be378bb63449ec7ba6" kindref="member">LE</ref><sp/>=<sp/>2,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8a946003f97ccc52d5d3b54ac0ec31bbfc" kindref="member">FALSE</ref><sp/>=<sp/>3,<sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8adc33066c3993e0d50896e533fd692ce0" kindref="member">NE</ref><sp/>=<sp/>4,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ad7d6a13c7b311ec8a3c9fcfb1919a2f8" kindref="member">NLT</ref><sp/>=<sp/>5,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8aacd748f300c5d189c47807e2a9d6ea57" kindref="member">NLE</ref><sp/>=<sp/>6,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ac0d83f0b82a6b30de8811e69e6d95c61" kindref="member">TRUE</ref><sp/>=<sp/>7<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="namespacehetest_1_1utils_1aab7d7acb16b2a22388513ae84818214c" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8" kindref="member">CMPINT</ref><sp/><ref refid="namespacehetest_1_1utils_1aab7d7acb16b2a22388513ae84818214c" kindref="member">Not</ref>(<ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8" kindref="member">CMPINT</ref><sp/>cmp)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cmp)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8a2dcbad7477fd40561e8b8198f173bd47" kindref="member">CMPINT::EQ</ref>:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8adc33066c3993e0d50896e533fd692ce0" kindref="member">CMPINT::NE</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ac562607189d77eb9dfb707464c1e7b0b" kindref="member">CMPINT::LT</ref>:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ad7d6a13c7b311ec8a3c9fcfb1919a2f8" kindref="member">CMPINT::NLT</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8acfe6055d2e0503be378bb63449ec7ba6" kindref="member">CMPINT::LE</ref>:</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8aacd748f300c5d189c47807e2a9d6ea57" kindref="member">CMPINT::NLE</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8a946003f97ccc52d5d3b54ac0ec31bbfc" kindref="member">CMPINT::FALSE</ref>:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ac0d83f0b82a6b30de8811e69e6d95c61" kindref="member">CMPINT::TRUE</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8adc33066c3993e0d50896e533fd692ce0" kindref="member">CMPINT::NE</ref>:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8a2dcbad7477fd40561e8b8198f173bd47" kindref="member">CMPINT::EQ</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ad7d6a13c7b311ec8a3c9fcfb1919a2f8" kindref="member">CMPINT::NLT</ref>:</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ac562607189d77eb9dfb707464c1e7b0b" kindref="member">CMPINT::LT</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8aacd748f300c5d189c47807e2a9d6ea57" kindref="member">CMPINT::NLE</ref>:</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8acfe6055d2e0503be378bb63449ec7ba6" kindref="member">CMPINT::LE</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ac0d83f0b82a6b30de8811e69e6d95c61" kindref="member">CMPINT::TRUE</ref>:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8a946003f97ccc52d5d3b54ac0ec31bbfc" kindref="member">CMPINT::FALSE</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8a946003f97ccc52d5d3b54ac0ec31bbfc" kindref="member">CMPINT::FALSE</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hetest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>UTILS_DEBUG</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTILS_CHECK(cond,<sp/>expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!(cond))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>expr<sp/>&lt;&lt;<sp/>&quot;<sp/>in<sp/>function:<sp/>&quot;<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>in<sp/>file:<sp/>&quot;<sp/>__FILE__<sp/>&lt;&lt;<sp/>&quot;<sp/>at<sp/>line:<sp/>&quot;<sp/>&lt;&lt;<sp/>__LINE__;<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(&quot;Error.<sp/>Check<sp/>log<sp/>output&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTILS_CHECK_BOUNDS(arg,<sp/>n,<sp/>bound,<sp/>expr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>utils_check_idx<sp/>=<sp/>0;<sp/>utils_check_idx<sp/>&lt;<sp/>n;<sp/>++utils_check_idx)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UTILS_CHECK((arg)[utils_check_idx]<sp/>&lt;<sp/>bound,<sp/>expr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>UTILS_DEBUG=OFF</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UTILS_CHECK(cond,<sp/>expr)<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="83" refid="utils-test_8hpp_1a211847bac88927d6b3426fc78dc052be" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>UTILS_CHECK_BOUNDS(...)<sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>UTILS_DEBUG</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hetest<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>x<sp/>*<sp/>y<sp/>as<sp/>128-bit<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Correctness<sp/>if<sp/>x<sp/>*<sp/>y<sp/>&lt;<sp/>128<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="namespacehetest_1_1utils_1af38bb2ec0ec65a229877d4a3bdbe787f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref><sp/><ref refid="namespacehetest_1_1utils_1af38bb2ec0ec65a229877d4a3bdbe787f" kindref="member">MultiplyUInt64</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref>(x)<sp/>*<sp/><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref>(y);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="namespacehetest_1_1utils_1a842729d820bda62d95f80ebdde202ac6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a842729d820bda62d95f80ebdde202ac6" kindref="member">BarrettReduce128</ref>(uint64_t<sp/>input_hi,<sp/>uint64_t<sp/>input_lo,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(modulus<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;modulus<sp/>==<sp/>0&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref><sp/>n<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(input_hi)<sp/>&lt;&lt;<sp/>64)<sp/>|</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(input_lo));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n<sp/>%<sp/>modulus);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(fboemer):<sp/>actually<sp/>use<sp/>barrett<sp/>reduction<sp/>if<sp/>performance-critical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>low<sp/>64bit<sp/>of<sp/>128b/64b<sp/>where<sp/>x1=high<sp/>64b,<sp/>x0=low<sp/>64b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="namespacehetest_1_1utils_1a8c18008a708b9e3146f8c5bb95317415" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a8c18008a708b9e3146f8c5bb95317415" kindref="member">DivideUInt128UInt64Lo</ref>(uint64_t<sp/>x1,<sp/>uint64_t<sp/>x0,<sp/>uint64_t<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref><sp/>n<sp/>=</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x1)<sp/>&lt;&lt;<sp/>64)<sp/>|<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x0));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref><sp/>q<sp/>=<sp/>n<sp/>/<sp/>y;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(q);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Multiplies<sp/>x<sp/>*<sp/>y<sp/>as<sp/>128-bit<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>prod_hi<sp/>Stores<sp/>high<sp/>64<sp/>bits<sp/>of<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>prod_lo<sp/>Stores<sp/>low<sp/>64<sp/>bits<sp/>of<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="namespacehetest_1_1utils_1a8329306e8a458a7ce160ef870e59a9a3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1af38bb2ec0ec65a229877d4a3bdbe787f" kindref="member">MultiplyUInt64</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t*<sp/>prod_hi,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>prod_lo)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref><sp/>prod<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1af38bb2ec0ec65a229877d4a3bdbe787f" kindref="member">MultiplyUInt64</ref>(x,<sp/>y);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>*prod_hi<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(prod<sp/>&gt;&gt;<sp/>64);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>*prod_lo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(prod);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>high<sp/>128<sp/>minus<sp/>BitShift<sp/>bits<sp/>of<sp/>the<sp/>128-bit<sp/>product<sp/>x<sp/>*<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BitShift&gt;</highlight></codeline>
<codeline lineno="128" refid="namespacehetest_1_1utils_1a625cc618050dc0a7fe3fc1720224018b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a625cc618050dc0a7fe3fc1720224018b" kindref="member">MultiplyUInt64Hi</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1ab76ef99db23830c7fec1e3019737cab4" kindref="member">uint128_t</ref><sp/>product<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1af38bb2ec0ec65a229877d4a3bdbe787f" kindref="member">MultiplyUInt64</ref>(x,<sp/>y);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(product<sp/>&gt;&gt;<sp/>BitShift);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>most-significant<sp/>bit<sp/>of<sp/>the<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="namespacehetest_1_1utils_1a5f70a68d72b65afc296c5d38def31235" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a5f70a68d72b65afc296c5d38def31235" kindref="member">MSB</ref>(uint64_t<sp/>input)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::log2l(input));</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hetest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hetest<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="namespacehetest_1_1utils_1abde8eb855b18fb857dbbd7b06d96fd66" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1abde8eb855b18fb857dbbd7b06d96fd66" kindref="member">Compare</ref>(<ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8" kindref="member">CMPINT</ref><sp/>cmp,<sp/>uint64_t<sp/>lhs,<sp/>uint64_t<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cmp)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8a2dcbad7477fd40561e8b8198f173bd47" kindref="member">CMPINT::EQ</ref>:</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>==<sp/>rhs;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ac562607189d77eb9dfb707464c1e7b0b" kindref="member">CMPINT::LT</ref>:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&lt;<sp/>rhs;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8acfe6055d2e0503be378bb63449ec7ba6" kindref="member">CMPINT::LE</ref>:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&lt;=<sp/>rhs;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8a946003f97ccc52d5d3b54ac0ec31bbfc" kindref="member">CMPINT::FALSE</ref>:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8adc33066c3993e0d50896e533fd692ce0" kindref="member">CMPINT::NE</ref>:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>!=<sp/>rhs;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ad7d6a13c7b311ec8a3c9fcfb1919a2f8" kindref="member">CMPINT::NLT</ref>:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&gt;=<sp/>rhs;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8aacd748f300c5d189c47807e2a9d6ea57" kindref="member">CMPINT::NLE</ref>:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&gt;<sp/>rhs;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ac7fa0c35a418955522dc45b10864fdc8ac0d83f0b82a6b30de8811e69e6d95c61" kindref="member">CMPINT::TRUE</ref>:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>whether<sp/>or<sp/>not<sp/>num<sp/>is<sp/>a<sp/>power<sp/>of<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="namespacehetest_1_1utils_1a968364009ecc6add3849c161d7a1088f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a968364009ecc6add3849c161d7a1088f" kindref="member">IsPowerOfTwo</ref>(uint64_t<sp/>num)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num<sp/>&amp;&amp;<sp/>!(num<sp/>&amp;<sp/>(num<sp/>-<sp/>1));<sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>log2(x)<sp/>for<sp/>x<sp/>a<sp/>power<sp/>of<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="namespacehetest_1_1utils_1acb4bd5dad64e6c1db0f2b4e1afaa63db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespacehetest_1_1utils_1acb4bd5dad64e6c1db0f2b4e1afaa63db" kindref="member">Log2</ref>(uint64_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(<ref refid="namespacehetest_1_1utils_1a968364009ecc6add3849c161d7a1088f" kindref="member">IsPowerOfTwo</ref>(x),<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>a<sp/>power<sp/>of<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a5f70a68d72b65afc296c5d38def31235" kindref="member">MSB</ref>(x);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>maximum<sp/>value<sp/>that<sp/>can<sp/>be<sp/>represented<sp/>using<sp/>bits<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="namespacehetest_1_1utils_1a959fdf1d396b9b4f4362486106e7f655" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a959fdf1d396b9b4f4362486106e7f655" kindref="member">MaximumValue</ref>(uint64_t<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(bits<sp/>&lt;=<sp/>64,<sp/></highlight><highlight class="stringliteral">&quot;MaximumValue<sp/>requires<sp/>bits<sp/>&lt;=<sp/>64;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bits);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>==<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::numeric_limits&lt;uint64_t&gt;::max)();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1ULL<sp/>&lt;&lt;<sp/>bits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hetest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hetest<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="structhetest_1_1utils_1_1AllocatorBase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhetest_1_1utils_1_1AllocatorBase" kindref="compound">AllocatorBase</ref><sp/>{</highlight></codeline>
<codeline lineno="196" refid="structhetest_1_1utils_1_1AllocatorBase_1a8b16ff8d74578e0162706b8bbfa3751a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structhetest_1_1utils_1_1AllocatorBase_1a8b16ff8d74578e0162706b8bbfa3751a" kindref="member">~AllocatorBase</ref>()<sp/>noexcept<sp/>{}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structhetest_1_1utils_1_1AllocatorBase_1aa179ce655f57197104fce71166c17374" kindref="member">allocate</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_count)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhetest_1_1utils_1_1AllocatorBase_1ab9e3d2285da2861d0939afe26c6683e4" kindref="member">deallocate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>AllocatorImpl&gt;</highlight></codeline>
<codeline lineno="202" refid="structhetest_1_1utils_1_1AllocatorInterface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhetest_1_1utils_1_1AllocatorInterface" kindref="compound">AllocatorInterface</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structhetest_1_1utils_1_1AllocatorBase" kindref="compound">AllocatorBase</ref><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>override<sp/>interface<sp/>&amp;<sp/>delegate<sp/>implementation<sp/>to<sp/>AllocatorImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="structhetest_1_1utils_1_1AllocatorInterface_1aa155e501b1e16984f8da9b1837597e66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structhetest_1_1utils_1_1AllocatorInterface_1aa155e501b1e16984f8da9b1837597e66" kindref="member">allocate</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_count)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">AllocatorImpl*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;allocate_impl(bytes_count);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207" refid="structhetest_1_1utils_1_1AllocatorInterface_1a2d76269d7edd0d9cb65e6bfeffc24432" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhetest_1_1utils_1_1AllocatorInterface_1a2d76269d7edd0d9cb65e6bfeffc24432" kindref="member">deallocate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">AllocatorImpl*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;deallocate_impl(p,<sp/>n);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>of<sp/>AllocatorImpl<sp/>doesn&apos;t<sp/>provide<sp/>implementations<sp/>use<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>behavior:<sp/>break<sp/>compilation<sp/>with<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>allocate_impl(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_count)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)bytes_count;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_message&lt;0&gt;();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deallocate_impl(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)p;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)n;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_message&lt;1&gt;();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pretty<sp/>compilation<sp/>error<sp/>printing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_code&gt;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fail_message()<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(error_code<sp/>==<sp/>0),</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>&apos;AllocatorAdapter`as<sp/>interface<sp/>requires<sp/>to<sp/>implement<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;::allocate_impl`<sp/>method&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!(error_code<sp/>==<sp/>1),</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>&apos;AllocatorAdapter`as<sp/>interface<sp/>requires<sp/>to<sp/>implement<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&apos;::deallocate_impl`<sp/>method&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal">};</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hetest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hetest<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="namespacehetest_1_1utils_1_1details" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">details<sp/>{</highlight></codeline>
<codeline lineno="246" refid="structhetest_1_1utils_1_1details_1_1MallocStrategy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhetest_1_1utils_1_1details_1_1MallocStrategy" kindref="compound">MallocStrategy</ref><sp/>:<sp/><ref refid="structhetest_1_1utils_1_1AllocatorBase" kindref="compound">AllocatorBase</ref><sp/>{</highlight></codeline>
<codeline lineno="247" refid="structhetest_1_1utils_1_1details_1_1MallocStrategy_1a6e72b748596f8ba704363b1aa4d501d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structhetest_1_1utils_1_1details_1_1MallocStrategy_1a6e72b748596f8ba704363b1aa4d501d9" kindref="member">allocate</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_count)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::malloc(bytes_count);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251" refid="structhetest_1_1utils_1_1details_1_1MallocStrategy_1a86b2b253ec7d4da560da97f6d30e7325" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhetest_1_1utils_1_1details_1_1MallocStrategy_1a86b2b253ec7d4da560da97f6d30e7325" kindref="member">deallocate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)n;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free(p);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal">};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="structhetest_1_1utils_1_1details_1_1CustomAllocStrategy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhetest_1_1utils_1_1details_1_1CustomAllocStrategy" kindref="compound">CustomAllocStrategy</ref><sp/>{</highlight></codeline>
<codeline lineno="258" refid="structhetest_1_1utils_1_1details_1_1CustomAllocStrategy_1aecbed5a7bad355a6ac9c72dcf88c9936" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structhetest_1_1utils_1_1details_1_1CustomAllocStrategy_1aecbed5a7bad355a6ac9c72dcf88c9936" kindref="member">CustomAllocStrategy</ref>(std::shared_ptr&lt;AllocatorBase&gt;<sp/>impl)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>p_impl(impl)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!impl)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>create<sp/>&apos;CustomAllocStrategy&apos;<sp/>without<sp/>`impl`&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="structhetest_1_1utils_1_1details_1_1CustomAllocStrategy_1aab5db3cb69c7135a945a8b3e094645a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structhetest_1_1utils_1_1details_1_1CustomAllocStrategy_1aab5db3cb69c7135a945a8b3e094645a3" kindref="member">allocate_memory</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_count)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_impl-&gt;allocate(bytes_count);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="structhetest_1_1utils_1_1details_1_1CustomAllocStrategy_1ac37a17b014a233a6dd134704c6d072ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhetest_1_1utils_1_1details_1_1CustomAllocStrategy_1ac37a17b014a233a6dd134704c6d072ac" kindref="member">deallocate_memory</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/>p_impl-&gt;deallocate(p,<sp/>n);<sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AllocatorBase&gt;<sp/>p_impl;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">};</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="namespacehetest_1_1utils_1a3f7f347b9f62a88014bdcc45f7987846" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a3f7f347b9f62a88014bdcc45f7987846" kindref="member">AllocatorStrategyPtr</ref><sp/>=<sp/>std::shared_ptr&lt;AllocatorBase&gt;;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a3f7f347b9f62a88014bdcc45f7987846" kindref="member">AllocatorStrategyPtr</ref><sp/><ref refid="namespacehetest_1_1utils_1ac87aad4fed0f78704edd9639dcc44e03" kindref="member">mallocStrategy</ref>;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">64_t<sp/>Alignment&gt;</highlight></codeline>
<codeline lineno="281" refid="classhetest_1_1utils_1_1AlignedAllocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhetest_1_1utils_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">64_t&gt;</highlight></codeline>
<codeline lineno="284" refid="classhetest_1_1utils_1_1AlignedAllocator_1aaded07599020ca35e89e078674263c63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhetest_1_1utils_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="classhetest_1_1utils_1_1AlignedAllocator_1a1de3067f7171cca11e5c3cd10b508998" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator_1a1de3067f7171cca11e5c3cd10b508998" kindref="member">value_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="classhetest_1_1utils_1_1AlignedAllocator_1af66cd2d6a02b27e18ba02ffc3a345544" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator_1af66cd2d6a02b27e18ba02ffc3a345544" kindref="member">AlignedAllocator</ref>(<ref refid="namespacehetest_1_1utils_1a3f7f347b9f62a88014bdcc45f7987846" kindref="member">AllocatorStrategyPtr</ref><sp/>strategy<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>noexcept</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_alloc_impl((strategy<sp/>!=<sp/></highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">)<sp/>?<sp/>strategy<sp/>:<sp/><ref refid="namespacehetest_1_1utils_1ac87aad4fed0f78704edd9639dcc44e03" kindref="member">mallocStrategy</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="classhetest_1_1utils_1_1AlignedAllocator_1a71bdbfb1ae4ac672c4a0dc4e7504e195" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator_1a71bdbfb1ae4ac672c4a0dc4e7504e195" kindref="member">AlignedAllocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>&amp;<sp/>src)</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_alloc_impl(src.m_alloc_impl)<sp/>{}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>&amp;<sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator_1aa4cc09aaeb73f1a43878c740c616dc67" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>&amp;<sp/>src)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="297" refid="classhetest_1_1utils_1_1AlignedAllocator_1a3a1080fe5c9e4be3d73da338835c9fa7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator_1a3a1080fe5c9e4be3d73da338835c9fa7" kindref="member">AlignedAllocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator" kindref="compound">AlignedAllocator&lt;U, Alignment&gt;</ref>&amp;<sp/>src)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_alloc_impl(src.m_alloc_impl)<sp/>{}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="classhetest_1_1utils_1_1AlignedAllocator_1a0d84644228d98daf2407ff6046ceca5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator_1a0d84644228d98daf2407ff6046ceca5a" kindref="member">~AlignedAllocator</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="303" refid="structhetest_1_1utils_1_1AlignedAllocator_1_1rebind" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhetest_1_1utils_1_1AlignedAllocator_1_1rebind" kindref="compound">rebind</ref><sp/>{</highlight></codeline>
<codeline lineno="304" refid="structhetest_1_1utils_1_1AlignedAllocator_1_1rebind_1ac55bc630e5d5c06ccfb3cdfe249f0a47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator" kindref="compound">other</ref><sp/>=<sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator" kindref="compound">AlignedAllocator&lt;U, Alignment&gt;</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="classhetest_1_1utils_1_1AlignedAllocator_1a9e7374df3ec465f1b2e522f5e7c57ee0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator_1a9e7374df3ec465f1b2e522f5e7c57ee0" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="classhetest_1_1utils_1_1AlignedAllocator_1ab17ae365e2e63a0b1c27c5b194b0dbf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator_1ab17ae365e2e63a0b1c27c5b194b0dbf1" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="classhetest_1_1utils_1_1AlignedAllocator_1a3d9f851ef4ffdbd83936f1810e53752d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator_1a3d9f851ef4ffdbd83936f1810e53752d" kindref="member">allocate</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacehetest_1_1utils_1a968364009ecc6add3849c161d7a1088f" kindref="member">IsPowerOfTwo</ref>(Alignment))<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>enough<sp/>space<sp/>to<sp/>ensure<sp/>the<sp/>alignment<sp/>can<sp/>be<sp/>satisfied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buffer_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>n<sp/>+<sp/>Alignment;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Additionally,<sp/>allocate<sp/>a<sp/>prefix<sp/>to<sp/>store<sp/>the<sp/>memory<sp/>location<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unaligned<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alloc_size<sp/>=<sp/>buffer_size<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buffer<sp/>=<sp/>m_alloc_impl-&gt;allocate(alloc_size);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buffer)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reserve<sp/>first<sp/>location<sp/>for<sp/>pointer<sp/>to<sp/>originally-allocated<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>aligned_buffer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffer)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::align(Alignment,<sp/>sizeof(T)<sp/>*<sp/>n,<sp/>aligned_buffer,<sp/>buffer_size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!aligned_buffer)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>allocated<sp/>buffer<sp/>address<sp/>at<sp/>aligned_buffer<sp/>-<sp/>sizeof(void*).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>store_buffer_addr<sp/>=</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aligned_buffer)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(store_buffer_addr))<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(aligned_buffer);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classhetest_1_1utils_1_1AlignedAllocator_1a109a8cc9e6c49b75382f9c019b04ba03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1AlignedAllocator_1a109a8cc9e6c49b75382f9c019b04ba03" kindref="member">deallocate</ref>(T*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>store_buffer_addr<sp/>=<sp/>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>free_address<sp/>=<sp/>*(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(store_buffer_addr));</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_alloc_impl-&gt;deallocate(free_address,<sp/>n);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1a3f7f347b9f62a88014bdcc45f7987846" kindref="member">AllocatorStrategyPtr</ref><sp/>m_alloc_impl;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">};</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="354" refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64</ref><sp/>=<sp/>std::vector&lt;T,<sp/>AlignedAllocator&lt;T,<sp/>64&gt;<sp/>&gt;;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hetest</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/disk1/ymeng12/hexl-fpga/tests/test_utils/utils-test.hpp"/>
  </compounddef>
</doxygen>
