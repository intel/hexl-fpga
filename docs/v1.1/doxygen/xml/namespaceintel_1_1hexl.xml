<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="namespaceintel_1_1hexl" kind="namespace">
    <compoundname>intel::hexl</compoundname>
    <innernamespace refid="namespaceintel_1_1hexl_1_1fpga">intel::hexl::fpga</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceintel_1_1hexl_1a6236e14eaac1602475c5f4e0a42754fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::acquire_FPGA_resources</definition>
        <argsstring>()</argsstring>
        <name>acquire_FPGA_resources</name>
        <briefdescription>
<para>Function acquire_FPGA_resources Called without any parameter, reserves the FPGA hardware resources. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1a717589c6dbfa6429b61e42c620d72d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::release_FPGA_resources</definition>
        <argsstring>()</argsstring>
        <name>release_FPGA_resources</name>
        <briefdescription>
<para>Function release_FPGA_resources Called without any parameter, releases the FPGA hardware resources once we are done. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1a0721fea3151425a86da2201107e3ddcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::set_worksize_DyadicMultiply</definition>
        <argsstring>(uint64_t ws)</argsstring>
        <name>set_worksize_DyadicMultiply</name>
        <param>
          <type>uint64_t</type>
          <declname>ws</declname>
        </param>
        <briefdescription>
<para>Function set_worksize_DyadicMultiply Reserves software resources for the multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ws</parametername>
</parameternamelist>
<parameterdescription>
<para>integer storing the worksize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1ae4e26f2cb97a43a2b81fe8643b6edf17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::DyadicMultiply</definition>
        <argsstring>(uint64_t *results, const uint64_t *operand1, const uint64_t *operand2, uint64_t n, const uint64_t *moduli, uint64_t n_moduli)</argsstring>
        <name>DyadicMultiply</name>
        <param>
          <type>uint64_t *</type>
          <declname>results</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>operand1</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>operand2</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>moduli</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>n_moduli</declname>
        </param>
        <briefdescription>
<para>Function DyadicMultiply Executes ciphertext ciphertext multiplication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">results</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the multiplication results </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operand1</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the input ciphertext 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">operand2</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the input ciphertext 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>stores polynomial size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">moduli</parametername>
</parameternamelist>
<parameterdescription>
<para>stores modulus size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n_moduli</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the number of moduli </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1a638ef00009ae573955d1138b9fb03363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool intel::hexl::DyadicMultiplyCompleted</definition>
        <argsstring>()</argsstring>
        <name>DyadicMultiplyCompleted</name>
        <briefdescription>
<para>Function DyadicMultiplyCompleted Executed after ciphertext ciphertext multiplication to wrap up the task. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1a8ac8866d0693f8fc89f99a9197cd04cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::set_worksize_KeySwitch</definition>
        <argsstring>(uint64_t ws)</argsstring>
        <name>set_worksize_KeySwitch</name>
        <param>
          <type>uint64_t</type>
          <declname>ws</declname>
        </param>
        <briefdescription>
<para>Function set_worksize_KeySwitch Reserves software resources for the KeySwitch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ws</parametername>
</parameternamelist>
<parameterdescription>
<para>integer storing the worksize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1aafddb377dcb2c351cfc3e014428cfe42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::KeySwitch</definition>
        <argsstring>(uint64_t *result, const uint64_t *t_target_iter_ptr, uint64_t n, uint64_t decomp_modulus_size, uint64_t key_modulus_size, uint64_t rns_modulus_size, uint64_t key_component_count, const uint64_t *moduli, const uint64_t **k_switch_keys, const uint64_t *modswitch_factors, const uint64_t *twiddle_factors=nullptr)</argsstring>
        <name>KeySwitch</name>
        <param>
          <type>uint64_t *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>t_target_iter_ptr</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>decomp_modulus_size</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>key_modulus_size</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>rns_modulus_size</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>key_component_count</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>moduli</declname>
        </param>
        <param>
          <type>const uint64_t **</type>
          <declname>k_switch_keys</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>modswitch_factors</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>twiddle_factors</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Function KeySwitch Executes KeySwitch operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">results</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the keyswitch results </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">t_target_iter_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the input ciphertext data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>stores polynomial size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">decomp_modulus_size</parametername>
</parameternamelist>
<parameterdescription>
<para>stores modulus size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key_modulus_size</parametername>
</parameternamelist>
<parameterdescription>
<para>stores key modulus size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rns_modulus_size</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the rns modulus size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key_component_size</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the key component size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">moduli</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the moduli </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">k_switch_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the keys for keyswitch operation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">modswitch_factors</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the factors for modular switch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">twiddle_factors</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the twiddle factors </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1ad36db7f99d2e70414645f961b723ab79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool intel::hexl::KeySwitchCompleted</definition>
        <argsstring>()</argsstring>
        <name>KeySwitchCompleted</name>
        <briefdescription>
<para>Function KeySwitchCompleted Executed after KeySwitch to sync up the outstanding KeySwitch tasks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1aeaae249dd080bb7cb40aea745c3df207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::_set_worksize_NTT</definition>
        <argsstring>(uint64_t ws)</argsstring>
        <name>_set_worksize_NTT</name>
        <param>
          <type>uint64_t</type>
          <declname>ws</declname>
        </param>
        <briefdescription>
<para>Function _set_worksize_NTT [[deprecated]] Reserves software resources for the Number Theoretic Transform. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ws</parametername>
</parameternamelist>
<parameterdescription>
<para>integer storing the worksize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1a8d7f5d51e5d7683ea691f86ef57d2c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::_NTT</definition>
        <argsstring>(uint64_t *operand, const uint64_t *root_of_unity_powers, const uint64_t *precon_root_of_unity_powers, uint64_t coeff_modulus, uint64_t n)</argsstring>
        <name>_NTT</name>
        <param>
          <type>uint64_t *</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>root_of_unity_powers</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>precon_root_of_unity_powers</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>coeff_modulus</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Function _NTT [[deprecated]] Executes in place the Number Theoretic Transform. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">operand</parametername>
</parameternamelist>
<parameterdescription>
<para>input ciphertext. This is also the output result since the transform is in place. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">operand</parametername>
</parameternamelist>
<parameterdescription>
<para>output ciphertext. This is also the input result since the transform is in place. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">root_of_unity_powers</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of twiddle factors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">precon_root_of_unity_powers</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of precomputed inverse twiddle factors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coeff_modulus</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the modulus </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the size of the Number Theoretic Transform </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1a410ec4dc67583d07f4f7d1c1000c24e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool intel::hexl::_NTTCompleted</definition>
        <argsstring>()</argsstring>
        <name>_NTTCompleted</name>
        <briefdescription>
<para>Function _NTTCompleted [[deprecated]] Executed after the NTT to wrap up the computation No parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1afc56a7a0c0870b87c5445de89a0fce81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::_set_worksize_INTT</definition>
        <argsstring>(uint64_t ws)</argsstring>
        <name>_set_worksize_INTT</name>
        <param>
          <type>uint64_t</type>
          <declname>ws</declname>
        </param>
        <briefdescription>
<para>Function _set_worksize_INTT [[deprecated]] Reserves software resources for the inverse Number Theoretic Transform. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ws</parametername>
</parameternamelist>
<parameterdescription>
<para>integer storing the worksize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1a69f85dd306cce099d7d68dfd3567bd3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void intel::hexl::_INTT</definition>
        <argsstring>(uint64_t *operand, const uint64_t *inv_root_of_unity_powers, const uint64_t *precon_inv_root_of_unity_powers, uint64_t coeff_modulus, uint64_t inv_n, uint64_t inv_n_w, uint64_t n)</argsstring>
        <name>_INTT</name>
        <param>
          <type>uint64_t *</type>
          <declname>operand</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>inv_root_of_unity_powers</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>precon_inv_root_of_unity_powers</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>coeff_modulus</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>inv_n</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>inv_n_w</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Function _INTT [[deprecated]] Executes in place the inverse Number Theoretic Transform. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">operand</parametername>
</parameternamelist>
<parameterdescription>
<para>input ciphertext. This is also the output result since the transform is in place. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">operand</parametername>
</parameternamelist>
<parameterdescription>
<para>output ciphertext. This is also the input result since the transform is in place. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inv_root_of_unity_powers</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of twiddle factors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">precon_inv_root_of_unity_powers</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of precomputed inverse twiddle factors </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coeff_modulus</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the modulus </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inv_n</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the normalization factor for the inverse transform. Inverse of the polynomial size ( 1/n) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">inv_n_w</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the normalization factor for the constant. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>stores the size of the Number Theoretic Transform </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceintel_1_1hexl_1aea83cf5603f96ba86ad15d99d997fe49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool intel::hexl::_INTTCompleted</definition>
        <argsstring>()</argsstring>
        <name>_INTTCompleted</name>
        <briefdescription>
<para>Function _INTTCompleted [[deprecated]] Executed after the INTT to wrap up the computation No parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/host/inc/hexl-fpga.h" line="161" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/disk1/ymeng12/hexl-fpga/host/inc/dyadic_multiply.h" line="10" column="1"/>
  </compounddef>
</doxygen>
