<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="number__theory__util_8h" kind="file">
    <compoundname>number_theory_util.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <includes local="no">limits</includes>
    <includes local="no">vector</includes>
    <includes refid="fpga__assert_8h" local="yes">fpga_assert.h</includes>
    <incdepgraph>
      <node id="161">
        <label>limits</label>
      </node>
      <node id="158">
        <label>cstdint</label>
      </node>
      <node id="159">
        <label>cmath</label>
      </node>
      <node id="162">
        <label>vector</label>
      </node>
      <node id="160">
        <label>iostream</label>
      </node>
      <node id="157">
        <label>number_theory_util.h</label>
        <link refid="number_theory_util.h"/>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
      </node>
      <node id="163">
        <label>fpga_assert.h</label>
        <link refid="fpga__assert_8h"/>
      </node>
    </incdepgraph>
    <innerclass refid="classintel_1_1hexl_1_1fpga_1_1MultiplyFactor" prot="public">intel::hexl::fpga::MultiplyFactor</innerclass>
    <innernamespace refid="namespaceintel">intel</innernamespace>
    <innernamespace refid="namespaceintel_1_1hexl">intel::hexl</innernamespace>
    <innernamespace refid="namespaceintel_1_1hexl_1_1fpga">intel::hexl::fpga</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__NUMBER_THEORY_H__</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__NUMBER_THEORY_H__</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fpga__assert_8h" kindref="compound">fpga_assert.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">intel<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hexl<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fpga<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" refkind="member"><highlight class="normal">__extension__<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int128<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>whether<sp/>or<sp/>not<sp/>num<sp/>is<sp/>a<sp/>power<sp/>of<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="namespaceintel_1_1hexl_1_1fpga_1a1e16bb896a629eb017fc92f87fe9b8d1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a1e16bb896a629eb017fc92f87fe9b8d1" kindref="member">IsPowerOfTwo</ref>(uint64_t<sp/>num)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num<sp/>&amp;&amp;<sp/>!(num<sp/>&amp;<sp/>(num<sp/>-<sp/>1));<sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>maximum<sp/>number<sp/>of<sp/>possible<sp/>significant<sp/>bits<sp/>given<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="namespaceintel_1_1hexl_1_1fpga_1ab2af2089c7624a4f2f6bb86a7744e6a1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1ab2af2089c7624a4f2f6bb86a7744e6a1" kindref="member">MSB</ref>(uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::log2l(modulus));</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>log2(x)<sp/>for<sp/>x<sp/>a<sp/>power<sp/>of<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="namespaceintel_1_1hexl_1_1fpga_1afcbeef9c605f8d1384004d4a736d1e37" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1afcbeef9c605f8d1384004d4a736d1e37" kindref="member">Log2</ref>(uint64_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(<ref refid="namespaceintel_1_1hexl_1_1fpga_1a1e16bb896a629eb017fc92f87fe9b8d1" kindref="member">IsPowerOfTwo</ref>(x),<sp/></highlight><highlight class="stringliteral">&quot;x<sp/>not<sp/>a<sp/>power<sp/>of<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1ab2af2089c7624a4f2f6bb86a7744e6a1" kindref="member">MSB</ref>(x);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>maximum<sp/>value<sp/>that<sp/>can<sp/>be<sp/>represented<sp/>using<sp/>bits<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespaceintel_1_1hexl_1_1fpga_1a5da7e2d76836d01351cc264ac98ca1f2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a5da7e2d76836d01351cc264ac98ca1f2" kindref="member">MaximumValue</ref>(uint64_t<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(bits<sp/>&lt;=<sp/>64,<sp/></highlight><highlight class="stringliteral">&quot;MaximumValue<sp/>requires<sp/>bits<sp/>&lt;=<sp/>64&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>==<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(std::numeric_limits&lt;uint64_t&gt;::max)();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1ULL<sp/>&lt;&lt;<sp/>bits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>x<sp/>*<sp/>y<sp/>as<sp/>128-bit<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Correctness<sp/>if<sp/>x<sp/>*<sp/>y<sp/>&lt;<sp/>128<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="namespaceintel_1_1hexl_1_1fpga_1abc78d586df607b1930db2e69ea14f1dc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1abc78d586df607b1930db2e69ea14f1dc" kindref="member">MultiplyUInt64</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref>(x)<sp/>*<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref>(y);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Multiplies<sp/>x<sp/>*<sp/>y<sp/>as<sp/>128-bit<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>prod_hi<sp/>Stores<sp/>high<sp/>64<sp/>bits<sp/>of<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>prod_lo<sp/>Stores<sp/>low<sp/>64<sp/>bits<sp/>of<sp/>product</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="namespaceintel_1_1hexl_1_1fpga_1a7ecaf4450f87d40067692edd70725474" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1abc78d586df607b1930db2e69ea14f1dc" kindref="member">MultiplyUInt64</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t*<sp/>prod_hi,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>prod_lo)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref><sp/>prod<sp/>=<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1abc78d586df607b1930db2e69ea14f1dc" kindref="member">MultiplyUInt64</ref>(x,<sp/>y);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>*prod_hi<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(prod<sp/>&gt;&gt;<sp/>64);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>*prod_lo<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(prod);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>high<sp/>128<sp/>minus<sp/>BitShift<sp/>bits<sp/>of<sp/>the<sp/>128-bit<sp/>product<sp/>x<sp/>*<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BitShift&gt;</highlight></codeline>
<codeline lineno="62" refid="namespaceintel_1_1hexl_1_1fpga_1a885fc322b5c2559feed13fdf5ded1660" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a885fc322b5c2559feed13fdf5ded1660" kindref="member">MultiplyUInt64Hi</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref><sp/>product<sp/>=<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1abc78d586df607b1930db2e69ea14f1dc" kindref="member">MultiplyUInt64</ref>(x,<sp/>y);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(product<sp/>&gt;&gt;<sp/>BitShift);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>low<sp/>64bit<sp/>of<sp/>128b/64b<sp/>where<sp/>x1=high<sp/>64b,<sp/>x0=low<sp/>64b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="namespaceintel_1_1hexl_1_1fpga_1aef53989a5c9adf16fcc5d0a188fa2abf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1aef53989a5c9adf16fcc5d0a188fa2abf" kindref="member">DivideUInt128UInt64Lo</ref>(uint64_t<sp/>x1,<sp/>uint64_t<sp/>x0,<sp/>uint64_t<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref><sp/>n<sp/>=</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x1)<sp/>&lt;&lt;<sp/>64)<sp/>|<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x0));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref><sp/>q<sp/>=<sp/>n<sp/>/<sp/>y;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(q);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>(x<sp/>*<sp/>y)<sp/>mod<sp/>modulus,<sp/>except<sp/>that<sp/>the<sp/>output<sp/>is<sp/>in<sp/>[0,<sp/>2<sp/>*<sp/>modulus]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>modulus_precon<sp/>Pre-computed<sp/>Barrett<sp/>reduction<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BitShift&gt;</highlight></codeline>
<codeline lineno="79" refid="namespaceintel_1_1hexl_1_1fpga_1adbd0b0b7a9ac26e1dd6bb182998aedb1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1adbd0b0b7a9ac26e1dd6bb182998aedb1" kindref="member">MultiplyUIntModLazy</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y_operand,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>y_barrett_factor,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(y_operand<sp/>&lt;<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;y_operand<sp/>must<sp/>be<sp/>less<sp/>than<sp/>modulus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(modulus<sp/>&lt;=<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a5da7e2d76836d01351cc264ac98ca1f2" kindref="member">MaximumValue</ref>(BitShift),<sp/></highlight><highlight class="stringliteral">&quot;Modulus<sp/>exceeds<sp/>bound&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(x<sp/>&lt;=<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a5da7e2d76836d01351cc264ac98ca1f2" kindref="member">MaximumValue</ref>(BitShift),<sp/></highlight><highlight class="stringliteral">&quot;x<sp/>exceeds<sp/>bound&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Q<sp/>=<sp/>MultiplyUInt64Hi&lt;BitShift&gt;(x,<sp/>y_barrett_factor);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y_operand<sp/>*<sp/>x<sp/>-<sp/>Q<sp/>*<sp/>modulus;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>(x<sp/>*<sp/>y)<sp/>mod<sp/>modulus,<sp/>except<sp/>that<sp/>the<sp/>output<sp/>is<sp/>in<sp/>[0,<sp/>2<sp/>*<sp/>modulus]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BitShift&gt;</highlight></codeline>
<codeline lineno="92" refid="namespaceintel_1_1hexl_1_1fpga_1a8ad6de5083fbeb063b3b9e697866d78e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1adbd0b0b7a9ac26e1dd6bb182998aedb1" kindref="member">MultiplyUIntModLazy</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(BitShift<sp/>==<sp/>64<sp/>||<sp/>BitShift<sp/>==<sp/>52,<sp/></highlight><highlight class="stringliteral">&quot;Unsupport<sp/>BitShift&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(x<sp/>&lt;=<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a5da7e2d76836d01351cc264ac98ca1f2" kindref="member">MaximumValue</ref>(BitShift),<sp/></highlight><highlight class="stringliteral">&quot;x<sp/>exceeds<sp/>bound&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(y<sp/>&lt;<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;y<sp/>must<sp/>be<sp/>less<sp/>than<sp/>modulus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(modulus<sp/>&lt;=<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a5da7e2d76836d01351cc264ac98ca1f2" kindref="member">MaximumValue</ref>(BitShift),<sp/></highlight><highlight class="stringliteral">&quot;modulus<sp/>exceeds<sp/>bound&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>y_hi{0};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>y_lo{0};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BitShift<sp/>==<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_hi<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_lo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BitShift<sp/>==<sp/>52)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_hi<sp/>=<sp/>y<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_lo<sp/>=<sp/>y<sp/>&lt;&lt;<sp/>52;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>y_barrett<sp/>=<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1aef53989a5c9adf16fcc5d0a188fa2abf" kindref="member">DivideUInt128UInt64Lo</ref>(y_hi,<sp/>y_lo,<sp/>modulus);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MultiplyUIntModLazy&lt;BitShift&gt;(x,<sp/>y,<sp/>y_barrett,<sp/>modulus);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>two<sp/>unsigned<sp/>64-bit<sp/>integers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>operand1<sp/>Number<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>operand2<sp/>Number<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>result<sp/>Stores<sp/>the<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@return<sp/>The<sp/>carry<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="namespaceintel_1_1hexl_1_1fpga_1a28220ed548927fc4a21cc823e2e71f42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a28220ed548927fc4a21cc823e2e71f42" kindref="member">AddUInt64</ref>(uint64_t<sp/>operand1,<sp/>uint64_t<sp/>operand2,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>*result<sp/>=<sp/>operand1<sp/>+<sp/>operand2;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*result<sp/>&lt;<sp/>operand1);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>input<sp/>is<sp/>prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a355c6cb8c5032602ed52e1c3789d8767" kindref="member">IsPrime</ref>(uint64_t<sp/>n);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>list<sp/>of<sp/>num_primes<sp/>primes<sp/>in<sp/>the<sp/>range<sp/>[2^(bit_size,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2^(bit_size+1)].<sp/>Ensures<sp/>each<sp/>prime<sp/>q<sp/>satisfies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>q<sp/>%<sp/>(2*ntt_size+1))<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>num_primes<sp/>Number<sp/>of<sp/>primes<sp/>to<sp/>generate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>bit_size<sp/>Bit<sp/>size<sp/>of<sp/>each<sp/>prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>ntt_size<sp/>N<sp/>such<sp/>that<sp/>each<sp/>prime<sp/>q<sp/>satisfies<sp/>q<sp/>%<sp/>(2N)<sp/>==<sp/>1.<sp/>N<sp/>must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>power<sp/>of<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">std::vector&lt;uint64_t&gt;<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a138dd08495620ae05b5576f1f9de1d22" kindref="member">GeneratePrimes</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_primes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit_size,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ntt_size<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>input<sp/>mod<sp/>modulus,<sp/>computed<sp/>via<sp/>Barrett<sp/>reduction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>q_barr<sp/>floor(2^64<sp/>/<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a5da697d6db585fa67212de6eb704e4ad" kindref="member">BarrettReduce64</ref>(uint64_t<sp/>input,<sp/>uint64_t<sp/>modulus,<sp/>uint64_t<sp/>q_barr);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>InputModFactor&gt;</highlight></codeline>
<codeline lineno="139" refid="namespaceintel_1_1hexl_1_1fpga_1a8c1918497a3bd37a60af3098d5923814" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a8c1918497a3bd37a60af3098d5923814" kindref="member">ReduceMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>modulus,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>twice_modulus<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>four_times_modulus<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(InputModFactor<sp/>==<sp/>1<sp/>||<sp/>InputModFactor<sp/>==<sp/>2<sp/>||</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputModFactor<sp/>==<sp/>4<sp/>||<sp/>InputModFactor<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;InputModFactor<sp/>should<sp/>be<sp/>1,<sp/>2,<sp/>4,<sp/>or<sp/>8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(twice_modulus<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;twice_modulus<sp/>should<sp/>not<sp/>be<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>*twice_modulus)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>*twice_modulus;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(twice_modulus<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;twice_modulus<sp/>should<sp/>not<sp/>be<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(four_times_modulus<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;four_times_modulus<sp/>should<sp/>not<sp/>be<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>*four_times_modulus)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>*four_times_modulus;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>*twice_modulus)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>*twice_modulus;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>unreachable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="namespaceintel_1_1hexl_1_1fpga_1a6010de9857e16825343611c7b7f65f3f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a6010de9857e16825343611c7b7f65f3f" kindref="member">BarrettReduce128</ref>(uint64_t<sp/>input_hi,<sp/>uint64_t<sp/>input_lo,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(modulus<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;modulus<sp/>==<sp/>0&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref><sp/>n<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(input_hi)<sp/>&lt;&lt;<sp/>64)<sp/>|</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespaceintel_1_1hexl_1_1fpga_1a855c40574416e25f94fb6b7817c2c4f3" kindref="member">uint128_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(input_lo));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n<sp/>%<sp/>modulus);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stores<sp/>an<sp/>integer<sp/>on<sp/>which<sp/>modular<sp/>multiplication<sp/>can<sp/>be<sp/>performed<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>efficiently,<sp/>at<sp/>the<sp/>cost<sp/>of<sp/>some<sp/>precomputation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="classintel_1_1hexl_1_1fpga_1_1MultiplyFactor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classintel_1_1hexl_1_1fpga_1_1MultiplyFactor" kindref="compound">MultiplyFactor</ref><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classintel_1_1hexl_1_1fpga_1_1MultiplyFactor_1aec4f895b6ede16736951ed97c6d07936" kindref="member">MultiplyFactor</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>and<sp/>stores<sp/>the<sp/>Barrett<sp/>factor<sp/>(operand<sp/>&lt;&lt;<sp/>bit_shift)<sp/>/<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="classintel_1_1hexl_1_1fpga_1_1MultiplyFactor_1a3c0cc8fced8ac81e2a74e1fbda837ee6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classintel_1_1hexl_1_1fpga_1_1MultiplyFactor_1a3c0cc8fced8ac81e2a74e1fbda837ee6" kindref="member">MultiplyFactor</ref>(uint64_t<sp/>operand,<sp/>uint64_t<sp/>bit_shift,<sp/>uint64_t<sp/>modulus)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_operand(operand)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(operand<sp/>&lt;=<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>must<sp/>be<sp/>less<sp/>than<sp/>modulus&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fpga__assert_8h_1a92619e7455b5f2360dd7fe9a657aa7a3" kindref="member">FPGA_ASSERT</ref>(bit_shift<sp/>==<sp/>64<sp/>||<sp/>bit_shift<sp/>==<sp/>52,<sp/></highlight><highlight class="stringliteral">&quot;Unsupport<sp/>BitShift&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>op_hi{0};</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>op_lo{0};</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_shift<sp/>==<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_hi<sp/>=<sp/>operand;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_lo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_shift<sp/>==<sp/>52)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_hi<sp/>=<sp/>operand<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_lo<sp/>=<sp/>operand<sp/>&lt;&lt;<sp/>52;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrett_factor<sp/>=<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1aef53989a5c9adf16fcc5d0a188fa2abf" kindref="member">DivideUInt128UInt64Lo</ref>(op_hi,<sp/>op_lo,<sp/>modulus);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="classintel_1_1hexl_1_1fpga_1_1MultiplyFactor_1aa14e2b825d1b951f5e1d1d0fb615f0bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="classintel_1_1hexl_1_1fpga_1_1MultiplyFactor_1aa14e2b825d1b951f5e1d1d0fb615f0bf" kindref="member">BarrettFactor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_barrett_factor;<sp/>}</highlight></codeline>
<codeline lineno="220" refid="classintel_1_1hexl_1_1fpga_1_1MultiplyFactor_1a70eefb9d515e068988d83ccf47a32c26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="classintel_1_1hexl_1_1fpga_1_1MultiplyFactor_1a70eefb9d515e068988d83ccf47a32c26" kindref="member">Operand</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_operand;<sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>m_operand;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>m_barrett_factor;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reverses<sp/>the<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1ac7d25ff5107f521d5a1e9365bf0eeb0b" kindref="member">ReverseBitsUInt</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>bits);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a^{-1}<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a845482aca85af5a78444389a52c61271" kindref="member">InverseUIntMod</ref>(uint64_t<sp/>a,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a359488f73600f049c3bb43412ac677fa" kindref="member">MultiplyUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>(x<sp/>*<sp/>y)<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>y_precon<sp/>floor(2**64<sp/>/<sp/>modulus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a3864868e9a43df15ba64e89800214ae6" kindref="member">MultiplyMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>y_precon,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>(x<sp/>+<sp/>y)<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assumes<sp/>x,<sp/>y<sp/>&lt;<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a1144b661773bb78643f4785c6aa8b1da" kindref="member">AddUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>(x<sp/>-<sp/>y)<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assumes<sp/>x,<sp/>y<sp/>&lt;<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1af79ff4e8c2d42008053feebe7200d741" kindref="member">SubUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>base^exp<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a6c12d1ce00baa576a619d42e368a0bba" kindref="member">PowMod</ref>(uint64_t<sp/>base,<sp/>uint64_t<sp/>exp,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>whether<sp/>root<sp/>is<sp/>a<sp/>degree-th<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>degree<sp/>must<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a30c3a0934c1a35689405952f8d5c3a77" kindref="member">IsPrimitiveRoot</ref>(uint64_t<sp/>root,<sp/>uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tries<sp/>to<sp/>return<sp/>a<sp/>primtiive<sp/>degree-th<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>-1<sp/>if<sp/>no<sp/>root<sp/>is<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a9628dca89b1827ee60f21c305705ac57" kindref="member">GeneratePrimitiveRoot</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>whether<sp/>root<sp/>is<sp/>a<sp/>degree-th<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>degree<sp/>must<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">uint64_t<sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1af1cd2e18fc07e6f6d58d9dbcc94aaf92" kindref="member">MinimalPrimitiveRoot</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceintel_1_1hexl_1_1fpga_1a4d25df05a50d6c613439b282ea5c2a0f" kindref="member">ComputeRootOfUnityPowers</ref>(uint64_t<sp/>m_q,<sp/>uint64_t<sp/>m_degree,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>m_degree_bits,<sp/>uint64_t<sp/>m_w,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>inv_root_of_unity_powers,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>precon64_inv_root_of_unity_powers,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>root_of_unity_powers,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>precon64_root_of_unity_powers);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fpga</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hexl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>intel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/disk1/ymeng12/hexl-fpga/host/inc/number_theory_util.h"/>
  </compounddef>
</doxygen>
