<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="test__dyadic__multiply__keyswitch_8cpp" kind="file">
    <compoundname>test_dyadic_multiply_keyswitch.cpp</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">vector</includes>
    <includes local="no">glob.h</includes>
    <includes local="yes">gtest/gtest.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">memory</includes>
    <includes local="no">nlohmann/json.hpp</includes>
    <includes local="no">random</includes>
    <includes local="no">string</includes>
    <includes refid="hexl-fpga_8h" local="yes">hexl-fpga.h</includes>
    <incdepgraph>
      <node id="184">
        <label>glob.h</label>
      </node>
      <node id="191">
        <label>hexl-fpga.h</label>
        <link refid="hexl-fpga_8h"/>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>test_dyadic_multiply_keyswitch.cpp</label>
        <link refid="test_dyadic_multiply_keyswitch.cpp"/>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
      </node>
      <node id="192">
        <label>cstdint</label>
      </node>
      <node id="190">
        <label>string</label>
      </node>
      <node id="186">
        <label>fstream</label>
      </node>
      <node id="189">
        <label>random</label>
      </node>
      <node id="183">
        <label>vector</label>
      </node>
      <node id="185">
        <label>gtest/gtest.h</label>
      </node>
      <node id="182">
        <label>cstdlib</label>
      </node>
      <node id="188">
        <label>nlohmann/json.hpp</label>
      </node>
      <node id="187">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="structKeySwitchTestVector" prot="public">KeySwitchTestVector</innerclass>
    <innerclass refid="classdyadic__multiply__keyswitch__test" prot="public">dyadic_multiply_keyswitch_test</innerclass>
    <innerclass refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test" prot="public">dyadic_multiply_keyswitch_test::dyadic_multiply_test</innerclass>
    <innerclass refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test" prot="public">dyadic_multiply_keyswitch_test::keyswitch_test</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__dyadic__multiply__keyswitch_8cpp_1ad38d3fafdcc3fdddf66bd32759c9a5c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(dyadic_multiply_keyswitch_test, batch_16384_6_7_7_2)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="classdyadic__multiply__keyswitch__test" kindref="compound">dyadic_multiply_keyswitch_test</ref></type>
        </param>
        <param>
          <type>batch_16384_6_7_7_2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/disk1/ymeng12/hexl-fpga/tests/test_dyadic_multiply_keyswitch.cpp" line="295" column="1" bodyfile="/disk1/ymeng12/hexl-fpga/tests/test_dyadic_multiply_keyswitch.cpp" bodystart="295" bodyend="313"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;glob.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nlohmann/json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hexl-fpga_8h" kindref="compound">hexl-fpga.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="structKeySwitchTestVector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structKeySwitchTestVector" kindref="compound">KeySwitchTestVector</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structKeySwitchTestVector_1a6250ec29fdab16360c0f956fcae55b40" kindref="member">KeySwitchTestVector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>json_filename);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structKeySwitchTestVector_1a95aa4da3c5518ef78bcc8de60339fcbf" kindref="member">coeff_count</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structKeySwitchTestVector_1a553ed9a4e56035cc083f2b29cc1d16a6" kindref="member">decomp_modulus_size</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structKeySwitchTestVector_1a98001c403e5ad60e03d188ca1bc2d0a7" kindref="member">key_modulus_size</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structKeySwitchTestVector_1a700faac161b8de302d05e4cdb24080b6" kindref="member">rns_modulus_size</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structKeySwitchTestVector_1adbffef31865ff107c1fc5ece85028d18" kindref="member">key_component_count</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/><ref refid="structKeySwitchTestVector_1a093fb1d7c028277e953c73e14c4bdc38" kindref="member">moduli</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/><ref refid="structKeySwitchTestVector_1a5d7c8ad32a914bb8d8ecf78a13f911ca" kindref="member">modswitch_factors</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/><ref refid="structKeySwitchTestVector_1a3299b1bfac2b08cfa386236a8e4b2c63" kindref="member">twiddle_factors</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>uint64_t*&gt;<sp/><ref refid="structKeySwitchTestVector_1a3efccd8f33a478bb9b447e38eb38662e" kindref="member">key_vectors</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/><ref refid="structKeySwitchTestVector_1a87c4ef64d069c11709451f4fe7b4a5fd" kindref="member">t_target_iter_ptr</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/><ref refid="structKeySwitchTestVector_1ada92bec84019ee1f4cad5ebdbc1a0be3" kindref="member">input</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/><ref refid="structKeySwitchTestVector_1ad9e47be1cfb9a7be31cfbbd3edfad593" kindref="member">expected_output</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;uint64_t&gt;&gt;<sp/><ref refid="structKeySwitchTestVector_1a00c0158e4d33300c0d34e9ca2be66a51" kindref="member">vectors</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>json_file;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>nlohmann::json<sp/>js;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classdyadic__multiply__keyswitch__test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdyadic__multiply__keyswitch__test" kindref="compound">dyadic_multiply_keyswitch_test</ref><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1a1fc5f6836d76b98a09dc7ee8a1844394" kindref="member">dyadic_multiply_keyswitch_test</ref>(uint64_t<sp/>num_dyadic_multiply,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="bench__keyswitch_8cpp_1af98ed5ee0025fea2f25864641c3f5727" kindref="member">test_fullname</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__keyswitch__test_1a1fc5f6836d76b98a09dc7ee8a1844394" kindref="member">dyadic_multiply_keyswitch_test</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test" kindref="compound">dyadic_multiply_keyswitch_test</ref>&amp;<sp/>test)<sp/>=</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1a6e543689d7aaee6f92e8d074fd45b4a7" kindref="member">test_dyadic_multiply_keyswitch</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1ac36414e1ab6000e3d32f98d4589d76e2" kindref="member">check_results</ref>();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test_1a979e3420fd9dd4f1d4bb7433ac460a3a" kindref="member">dyadic_multiply_test</ref>(uint64_t<sp/><ref refid="bench__dyadic__multiply_8cpp_1a1249f7c009d650067cdc1e2254fcb63c" kindref="member">n_dyadic_multiply</ref>,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>n_moduli,<sp/>uint64_t<sp/>coeff);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test_1a979e3420fd9dd4f1d4bb7433ac460a3a" kindref="member">dyadic_multiply_test</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>&amp;<sp/>test)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test_1a1cd5299855144e2a72b5990c1d5f0cb0" kindref="member">test_dyadic_multiply</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test_1a258d1e94bcab934387b1db0e85bfe0c0" kindref="member">check_results</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>moduli;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>op1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>op2;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>exp_out;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>out;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test" kindref="compound">keyswitch_test</ref><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test_1a8cfeba4a5a25c5131b8e7ca0daf03508" kindref="member">keyswitch_test</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>test_fullname);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test_1a8cfeba4a5a25c5131b8e7ca0daf03508" kindref="member">keyswitch_test</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test" kindref="compound">keyswitch_test</ref>&amp;<sp/>test)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test_1a69155a01607c35e15359427c4c0c0a53" kindref="member">test_keyswitch</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test_1aa7100866e2c3b9ba3f4a80d4def713a2" kindref="member">check_results</ref>();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>glob(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pattern);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;KeySwitchTestVector&gt;<sp/>test_vectors;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/><ref refid="classdyadic__multiply" kindref="compound">dyadic_multiply</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test" kindref="compound">keyswitch_test</ref><sp/><ref refid="classkeyswitch" kindref="compound">keyswitch</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="classdyadic__multiply__keyswitch__test_1a1fc5f6836d76b98a09dc7ee8a1844394" kindref="member">dyadic_multiply_keyswitch_test::dyadic_multiply_keyswitch_test</ref>(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply,<sp/>uint64_t<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>,<sp/>uint64_t<sp/>coeff_count,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="bench__keyswitch_8cpp_1af98ed5ee0025fea2f25864641c3f5727" kindref="member">test_fullname</ref>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classdyadic__multiply" kindref="compound">dyadic_multiply</ref>(num_dyadic_multiply,<sp/>num_moduli,<sp/>coeff_count),</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classkeyswitch" kindref="compound">keyswitch</ref>(test_fullname)<sp/>{}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1a6e543689d7aaee6f92e8d074fd45b4a7" kindref="member">dyadic_multiply_keyswitch_test::test_dyadic_multiply_keyswitch</ref>()<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply" kindref="compound">dyadic_multiply</ref>.test_dyadic_multiply();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkeyswitch" kindref="compound">keyswitch</ref>.test_keyswitch();</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1ac36414e1ab6000e3d32f98d4589d76e2" kindref="member">dyadic_multiply_keyswitch_test::check_results</ref>()<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply" kindref="compound">dyadic_multiply</ref>.check_results();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classkeyswitch" kindref="compound">keyswitch</ref>.check_results();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test_1a979e3420fd9dd4f1d4bb7433ac460a3a" kindref="member">dyadic_multiply_keyswitch_test::dyadic_multiply_test::dyadic_multiply_test</ref>(</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="bench__dyadic__multiply_8cpp_1a1249f7c009d650067cdc1e2254fcb63c" kindref="member">n_dyadic_multiply</ref>,<sp/>uint64_t<sp/>n_moduli,<sp/>uint64_t<sp/>coeff)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>num_dyadic_multiply(n_dyadic_multiply),</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>(n_moduli),</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>coeff_count(coeff)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>num_dyadic_multiply;<sp/>b++)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moduli.push_back((b<sp/>+<sp/>m<sp/>+<sp/>1)<sp/>*<sp/>10);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op1.push_back(b<sp/>+<sp/>i<sp/>+<sp/>1<sp/>+<sp/>m<sp/>*<sp/>coeff_count);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op2.push_back(b<sp/>+<sp/>i<sp/>+<sp/>2<sp/>+<sp/>m<sp/>*<sp/>coeff_count);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op1.push_back(b<sp/>+<sp/>i<sp/>+<sp/>11<sp/>+<sp/>m<sp/>*<sp/>coeff_count);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op2.push_back(b<sp/>+<sp/>i<sp/>+<sp/>22<sp/>+<sp/>m<sp/>*<sp/>coeff_count);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>poly0_offset<sp/>=</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2<sp/>+<sp/>m<sp/>*<sp/>coeff_count;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>m_offset<sp/>=<sp/>b<sp/>*<sp/>num_moduli<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>a<sp/>=<sp/>op1[poly0_offset<sp/>+<sp/>i]<sp/>*<sp/>op2[poly0_offset<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_out.push_back(a<sp/>%<sp/>moduli[m_offset]);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>poly0_offset<sp/>=</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2<sp/>+<sp/>m<sp/>*<sp/>coeff_count;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>poly1_offset<sp/>=<sp/>b<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2<sp/>+</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m<sp/>+<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>)<sp/>*<sp/>coeff_count;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>m_offset<sp/>=<sp/>b<sp/>*<sp/>num_moduli<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>x<sp/>=<sp/>op1[poly0_offset<sp/>+<sp/>i]<sp/>*<sp/>op2[poly1_offset<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>y<sp/>=<sp/>op1[poly1_offset<sp/>+<sp/>i]<sp/>*<sp/>op2[poly0_offset<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_out.push_back((x<sp/>+<sp/>y)<sp/>%<sp/>moduli[m_offset]);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>poly1_offset<sp/>=<sp/>b<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2<sp/>+</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m<sp/>+<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>)<sp/>*<sp/>coeff_count;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>m_offset<sp/>=<sp/>b<sp/>*<sp/>num_moduli<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>x<sp/>=<sp/>op1[poly1_offset<sp/>+<sp/>i]<sp/>*<sp/>op2[poly1_offset<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_out.push_back(x<sp/>%<sp/>moduli[m_offset]);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bench__dyadic__multiply_8cpp_1a9df79bfc3d20b59bcaf8d6721d1b8b82" kindref="member">out</ref>.resize(num_dyadic_multiply<sp/>*<sp/>3<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count,<sp/>0);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test_1a1cd5299855144e2a72b5990c1d5f0cb0" kindref="member">dyadic_multiply_keyswitch_test::dyadic_multiply_test::</ref></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test_1a1cd5299855144e2a72b5990c1d5f0cb0" kindref="member">    test_dyadic_multiply</ref>()<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1a0721fea3151425a86da2201107e3ddcc" kindref="member">intel::hexl::set_worksize_DyadicMultiply</ref>(num_dyadic_multiply);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>num_dyadic_multiply;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pout<sp/>=<sp/>&amp;<ref refid="bench__dyadic__multiply_8cpp_1a9df79bfc3d20b59bcaf8d6721d1b8b82" kindref="member">out</ref>[0]<sp/>+<sp/>n<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pop1<sp/>=<sp/>&amp;op1[0]<sp/>+<sp/>n<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pop2<sp/>=<sp/>&amp;op2[0]<sp/>+<sp/>n<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pmoduli<sp/>=<sp/>&amp;moduli[0]<sp/>+<sp/>n<sp/>*<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1ae4e26f2cb97a43a2b81fe8643b6edf17" kindref="member">intel::hexl::DyadicMultiply</ref>(pout,<sp/>pop1,<sp/>pop2,<sp/>coeff_count,<sp/>pmoduli,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_moduli);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1a638ef00009ae573955d1138b9fb03363" kindref="member">intel::hexl::DyadicMultiplyCompleted</ref>();</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1dyadic__multiply__test_1a258d1e94bcab934387b1db0e85bfe0c0" kindref="member">dyadic_multiply_keyswitch_test::dyadic_multiply_test::check_results</ref>()<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="bench__dyadic__multiply_8cpp_1a9df79bfc3d20b59bcaf8d6721d1b8b82" kindref="member">out</ref>,<sp/>exp_out);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="structKeySwitchTestVector_1a6250ec29fdab16360c0f956fcae55b40" kindref="member">KeySwitchTestVector::KeySwitchTestVector</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>json_filename)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>json_file(json_filename)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>json_file<sp/>&gt;&gt;<sp/>js;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>coeff_count<sp/>=<sp/>js[</highlight><highlight class="stringliteral">&quot;coeff_count&quot;</highlight><highlight class="normal">].get&lt;uint64_t&gt;();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>decomp_modulus_size<sp/>=<sp/>js[</highlight><highlight class="stringliteral">&quot;decomp_modulus_size&quot;</highlight><highlight class="normal">].get&lt;uint64_t&gt;();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>key_modulus_size<sp/>=<sp/>js[</highlight><highlight class="stringliteral">&quot;key_modulus_size&quot;</highlight><highlight class="normal">].get&lt;uint64_t&gt;();</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>rns_modulus_size<sp/>=<sp/>js[</highlight><highlight class="stringliteral">&quot;rns_modulus_size&quot;</highlight><highlight class="normal">].get&lt;uint64_t&gt;();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>key_component_count<sp/>=<sp/>js[</highlight><highlight class="stringliteral">&quot;key_component_count&quot;</highlight><highlight class="normal">].get&lt;uint64_t&gt;();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>moduli<sp/>=<sp/>js[</highlight><highlight class="stringliteral">&quot;moduli&quot;</highlight><highlight class="normal">].get&lt;std::vector&lt;uint64_t&gt;&gt;();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>modswitch_factors<sp/>=<sp/>js[</highlight><highlight class="stringliteral">&quot;modswitch_factors&quot;</highlight><highlight class="normal">].get&lt;std::vector&lt;uint64_t&gt;&gt;();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>twiddles<sp/>=<sp/>js.contains(</highlight><highlight class="stringliteral">&quot;inv_root_of_unity_powers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>twiddles<sp/>&amp;=<sp/>js.contains(</highlight><highlight class="stringliteral">&quot;precon64_inv_root_of_unity_powers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>twiddles<sp/>&amp;=<sp/>js.contains(</highlight><highlight class="stringliteral">&quot;root_of_unity_powers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>twiddles<sp/>&amp;=<sp/>js.contains(</highlight><highlight class="stringliteral">&quot;precon64_root_of_unity_powers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(twiddles)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>key_modulus_size;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twiddle_factors.push_back(js[</highlight><highlight class="stringliteral">&quot;inv_root_of_unity_powers&quot;</highlight><highlight class="normal">][k][i]);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twiddle_factors.push_back(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>js[</highlight><highlight class="stringliteral">&quot;precon64_inv_root_of_unity_powers&quot;</highlight><highlight class="normal">][k][i]);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twiddle_factors.push_back(js[</highlight><highlight class="stringliteral">&quot;root_of_unity_powers&quot;</highlight><highlight class="normal">][k][i]);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>twiddle_factors.push_back(</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>js[</highlight><highlight class="stringliteral">&quot;precon64_root_of_unity_powers&quot;</highlight><highlight class="normal">][k][i]);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>decomp_modulus_size;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>key_vector;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2<sp/>*<sp/>key_modulus_size<sp/>*<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_vector.push_back(js[</highlight><highlight class="stringliteral">&quot;key_vector&quot;</highlight><highlight class="normal">][k][i]);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vectors.push_back(key_vector);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key_vectors.push_back(const_cast&lt;uint64_t*&gt;(&amp;vectors[k].data()[0]));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>t_target_iter_ptr<sp/>=<sp/>js[</highlight><highlight class="stringliteral">&quot;t_target_iter_ptr&quot;</highlight><highlight class="normal">].get&lt;std::vector&lt;uint64_t&gt;&gt;();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>input<sp/>=<sp/>js[</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">].get&lt;std::vector&lt;uint64_t&gt;&gt;();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>expected_output<sp/>=<sp/>js[</highlight><highlight class="stringliteral">&quot;expected_output&quot;</highlight><highlight class="normal">].get&lt;std::vector&lt;uint64_t&gt;&gt;();</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">std::vector&lt;std::string&gt;<sp/>dyadic_multiply_keyswitch_test::keyswitch_test::glob(</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pattern)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>glob_t<sp/>glob_result<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__keyswitch_8cpp_1a3a42deea499822d5e741e7d0f48414c7" kindref="member">::glob</ref>(pattern,<sp/>GLOB_TILDE,<sp/>NULL,<sp/>&amp;glob_result);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>filenames(</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glob_result.gl_pathv,<sp/>glob_result.gl_pathv<sp/>+<sp/>glob_result.gl_pathc);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>globfree(&amp;glob_result);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filenames;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><ref refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test_1a8cfeba4a5a25c5131b8e7ca0daf03508" kindref="member">dyadic_multiply_keyswitch_test::keyswitch_test::keyswitch_test</ref>(</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="bench__keyswitch_8cpp_1af98ed5ee0025fea2f25864641c3f5727" kindref="member">test_fullname</ref>)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>test_vector_files;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>2;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="bench__keyswitch_8cpp_1ab053510e1eb9a0fccf4cbca4dfce2720" kindref="member">filesx</ref><sp/>=<sp/><ref refid="test__keyswitch_8cpp_1a3a42deea499822d5e741e7d0f48414c7" kindref="member">glob</ref>(test_fullname.c_str());</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>filesx.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_vector_files.push_back(filesx[i]);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_vector_files.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Constructing<sp/>Test<sp/>Vector<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>File<sp/>...<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>test_vector_files[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_vectors.push_back(</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structKeySwitchTestVector" kindref="compound">KeySwitchTestVector</ref>(test_vector_files[i].c_str()));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test_1a69155a01607c35e15359427c4c0c0a53" kindref="member">dyadic_multiply_keyswitch_test::keyswitch_test::test_keyswitch</ref>()<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>test_vector_size<sp/>=<sp/>test_vectors.size();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(test_vector_size<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1a8ac8866d0693f8fc89f99a9197cd04cf" kindref="member">intel::hexl::set_worksize_KeySwitch</ref>(test_vector_size);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_vector_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1aafddb377dcb2c351cfc3e014428cfe42" kindref="member">intel::hexl::KeySwitch</ref>(</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_vectors[i].input.data(),</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_vectors[i].t_target_iter_ptr.data(),</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_vectors[0].coeff_count,<sp/>test_vectors[0].decomp_modulus_size,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_vectors[0].key_modulus_size,<sp/>test_vectors[0].rns_modulus_size,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_vectors[0].key_component_count,<sp/>test_vectors[0].moduli.data(),</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_vectors[0].key_vectors.data(),</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_vectors[0].modswitch_factors.data(),</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_vectors[0].twiddle_factors.data());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1ad36db7f99d2e70414645f961b723ab79" kindref="member">intel::hexl::KeySwitchCompleted</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__keyswitch__test_1_1keyswitch__test_1aa7100866e2c3b9ba3f4a80d4def713a2" kindref="member">dyadic_multiply_keyswitch_test::keyswitch_test::check_results</ref>()<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>test_vector_size<sp/>=<sp/>test_vectors.size();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(test_vector_size<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>test_vector_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(test_vectors[i].input,<sp/>test_vectors[i].expected_output);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="test__dyadic__multiply__keyswitch_8cpp_1ad38d3fafdcc3fdddf66bd32759c9a5c4" kindref="member">TEST</ref>(<ref refid="classdyadic__multiply__keyswitch__test" kindref="compound">dyadic_multiply_keyswitch_test</ref>,<sp/>batch_16384_6_7_7_2)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>16384;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fname<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;KEYSWITCH_DATA_DIR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fname)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>env(KEYSWITCH_DATA_DIR)<sp/>to<sp/>the<sp/>test<sp/>vector<sp/>dir&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="bench__keyswitch_8cpp_1a43ae2e017e425ea454106c5eab76fe6d" kindref="member">test_file</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/16384_6_7_7_2_*&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>test_fullname<sp/>=<sp/>fname<sp/>+<sp/>test_file<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.json&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__keyswitch__test" kindref="compound">dyadic_multiply_keyswitch_test</ref><sp/>test(coeff_count<sp/>/<sp/>2,<sp/>num_moduli,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dyadic_multiply,<sp/>test_fullname);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>test.test_dyadic_multiply_keyswitch();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>test.check_results();</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/disk1/ymeng12/hexl-fpga/tests/test_dyadic_multiply_keyswitch.cpp"/>
  </compounddef>
</doxygen>
