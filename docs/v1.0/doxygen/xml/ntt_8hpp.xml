<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="ntt_8hpp" kind="file">
    <compoundname>ntt.hpp</compoundname>
    <includes refid="utils-test_8hpp" local="yes">utils-test.hpp</includes>
    <includedby refid="test__fwd__ntt_8cpp" local="yes">test_fwd_ntt.cpp</includedby>
    <includedby refid="test__inv__ntt_8cpp" local="yes">test_inv_ntt.cpp</includedby>
    <includedby refid="ntt_8cpp" local="yes">ntt.cpp</includedby>
    <incdepgraph>
      <node id="126">
        <label>limits</label>
      </node>
      <node id="123">
        <label>cstdint</label>
      </node>
      <node id="120">
        <label>utils-test.hpp</label>
        <link refid="utils-test_8hpp"/>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>cmath</label>
      </node>
      <node id="129">
        <label>vector</label>
      </node>
      <node id="128">
        <label>utility</label>
      </node>
      <node id="124">
        <label>cstdlib</label>
      </node>
      <node id="125">
        <label>iostream</label>
      </node>
      <node id="122">
        <label>cstddef</label>
      </node>
      <node id="119">
        <label>ntt.hpp</label>
        <link refid="ntt.hpp"/>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="132">
        <label>test_inv_ntt.cpp</label>
        <link refid="test__inv__ntt_8cpp"/>
      </node>
      <node id="131">
        <label>test_fwd_ntt.cpp</label>
        <link refid="test__fwd__ntt_8cpp"/>
      </node>
      <node id="133">
        <label>ntt.cpp</label>
        <link refid="ntt_8cpp"/>
      </node>
      <node id="130">
        <label>ntt.hpp</label>
        <link refid="ntt.hpp"/>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classhetest_1_1utils_1_1MultiplyFactor" prot="public">hetest::utils::MultiplyFactor</innerclass>
    <innerclass refid="classhetest_1_1utils_1_1NTT" prot="public">hetest::utils::NTT</innerclass>
    <innerclass refid="structhetest_1_1utils_1_1NTT_1_1AllocatorAdapter" prot="public">hetest::utils::NTT::AllocatorAdapter</innerclass>
    <innerclass refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl" prot="public">hetest::utils::NTT::NTTImpl</innerclass>
    <innernamespace refid="namespacehetest">hetest</innernamespace>
    <innernamespace refid="namespacehetest_1_1utils">hetest::utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight></codeline>
<codeline lineno="5"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utils-test_8hpp" kindref="compound">utils-test.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hetest<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Stores<sp/>an<sp/>integer<sp/>on<sp/>which<sp/>modular<sp/>multiplication<sp/>can<sp/>be<sp/>performed<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>efficiently,<sp/>at<sp/>the<sp/>cost<sp/>of<sp/>some<sp/>precomputation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="classhetest_1_1utils_1_1MultiplyFactor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhetest_1_1utils_1_1MultiplyFactor" kindref="compound">MultiplyFactor</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1MultiplyFactor_1a86c6f365d618c90d08e52855190be15c" kindref="member">MultiplyFactor</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Computes<sp/>and<sp/>stores<sp/>the<sp/>Barrett<sp/>factor<sp/>(operand<sp/>&lt;&lt;<sp/>bit_shift)<sp/>/<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="classhetest_1_1utils_1_1MultiplyFactor_1aaf6b00666ac003d44f1f71d98fc3c9a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1MultiplyFactor_1aaf6b00666ac003d44f1f71d98fc3c9a1" kindref="member">MultiplyFactor</ref>(uint64_t<sp/>operand,<sp/>uint64_t<sp/>bit_shift,<sp/>uint64_t<sp/>modulus)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_operand(operand)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operand<sp/>&lt;=<sp/>modulus,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>operand<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>must<sp/>be<sp/>less<sp/>than<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(bit_shift<sp/>==<sp/>64<sp/>||<sp/>bit_shift<sp/>==<sp/>52,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>BitShift<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bit_shift);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>op_hi{0};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>op_lo{0};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_shift<sp/>==<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_hi<sp/>=<sp/>operand;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_lo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_shift<sp/>==<sp/>52)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_hi<sp/>=<sp/>operand<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_lo<sp/>=<sp/>operand<sp/>&lt;&lt;<sp/>52;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_barrett_factor<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a8c18008a708b9e3146f8c5bb95317415" kindref="member">DivideUInt128UInt64Lo</ref>(op_hi,<sp/>op_lo,<sp/>modulus);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classhetest_1_1utils_1_1MultiplyFactor_1ae39a0ca3d2b8f97db8e28ed3f1cf9957" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="classhetest_1_1utils_1_1MultiplyFactor_1ae39a0ca3d2b8f97db8e28ed3f1cf9957" kindref="member">BarrettFactor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_barrett_factor;<sp/>}</highlight></codeline>
<codeline lineno="39" refid="classhetest_1_1utils_1_1MultiplyFactor_1adb9a6acac4142a551ad70cf9bbb56389" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="classhetest_1_1utils_1_1MultiplyFactor_1adb9a6acac4142a551ad70cf9bbb56389" kindref="member">Operand</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_operand;<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>m_operand;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>m_barrett_factor;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">};</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reverses<sp/>the<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1af9582ceaf67142fca2879962168298f6" kindref="member">ReverseBitsUInt</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>bits);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a^{-1}<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a3f409e865de8022c3ea069458b3913d6" kindref="member">InverseUIntMod</ref>(uint64_t<sp/>a,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a7e1e09f25d4ed5c4b8ed51fd0e7831e0" kindref="member">MultiplyUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>(x<sp/>*<sp/>y)<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>y_precon<sp/>floor(2**64<sp/>/<sp/>modulus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a05ab63c2edf76c87493770c59b9fbdde" kindref="member">MultiplyMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>y_precon,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>(x<sp/>+<sp/>y)<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assumes<sp/>x,<sp/>y<sp/>&lt;<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a2703d3db0db5510fac010b973ef9abdf" kindref="member">AddUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>(x<sp/>-<sp/>y)<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assumes<sp/>x,<sp/>y<sp/>&lt;<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a3ed335150e26cfd368e40a34e3af2f72" kindref="member">SubUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>base^exp<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1af4225e8fb310a252be626d55547299a4" kindref="member">PowMod</ref>(uint64_t<sp/>base,<sp/>uint64_t<sp/>exp,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>whether<sp/>root<sp/>is<sp/>a<sp/>degree-th<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>degree<sp/>must<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ae86c27a5d75d8b02cfb9b17eae7251a7" kindref="member">IsPrimitiveRoot</ref>(uint64_t<sp/>root,<sp/>uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tries<sp/>to<sp/>return<sp/>a<sp/>primtiive<sp/>degree-th<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>-1<sp/>if<sp/>no<sp/>root<sp/>is<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1ab90a6b556a35edc30cdef194aefad1a6" kindref="member">GeneratePrimitiveRoot</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>whether<sp/>root<sp/>is<sp/>a<sp/>degree-th<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>degree<sp/>must<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a1f9bf85bb99c3f6d6b9a72c3c2e85d3e" kindref="member">MinimalPrimitiveRoot</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>(x<sp/>*<sp/>y)<sp/>mod<sp/>modulus,<sp/>except<sp/>that<sp/>the<sp/>output<sp/>is<sp/>in<sp/>[0,<sp/>2<sp/>*<sp/>modulus]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>modulus_precon<sp/>Pre-computed<sp/>Barrett<sp/>reduction<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BitShift&gt;</highlight></codeline>
<codeline lineno="87" refid="namespacehetest_1_1utils_1af874c3ebc0c27f720a19c5f8e4ea288c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespacehetest_1_1utils_1af874c3ebc0c27f720a19c5f8e4ea288c" kindref="member">MultiplyUIntModLazy</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y_operand,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>y_barrett_factor,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_operand<sp/>&lt;<sp/>modulus,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;y_operand<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y_operand<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>must<sp/>be<sp/>less<sp/>than<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modulus<sp/>&lt;=<sp/><ref refid="namespacehetest_1_1utils_1a959fdf1d396b9b4f4362486106e7f655" kindref="member">MaximumValue</ref>(BitShift),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacehetest_1_1utils_1a959fdf1d396b9b4f4362486106e7f655" kindref="member">MaximumValue</ref>(BitShift));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(x<sp/>&lt;=<sp/><ref refid="namespacehetest_1_1utils_1a959fdf1d396b9b4f4362486106e7f655" kindref="member">MaximumValue</ref>(BitShift),</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Operand<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacehetest_1_1utils_1a959fdf1d396b9b4f4362486106e7f655" kindref="member">MaximumValue</ref>(BitShift));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>Q<sp/>=<sp/>MultiplyUInt64Hi&lt;BitShift&gt;(x,<sp/>y_barrett_factor);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y_operand<sp/>*<sp/>x<sp/>-<sp/>Q<sp/>*<sp/>modulus;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Computes<sp/>(x<sp/>*<sp/>y)<sp/>mod<sp/>modulus,<sp/>except<sp/>that<sp/>the<sp/>output<sp/>is<sp/>in<sp/>[0,<sp/>2<sp/>*<sp/>modulus]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BitShift&gt;</highlight></codeline>
<codeline lineno="105" refid="namespacehetest_1_1utils_1a6d381530e44b937b604ee7f44c841a21" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="namespacehetest_1_1utils_1af874c3ebc0c27f720a19c5f8e4ea288c" kindref="member">MultiplyUIntModLazy</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(BitShift<sp/>==<sp/>64<sp/>||<sp/>BitShift<sp/>==<sp/>52,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unsupported<sp/>BitShift<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>BitShift);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(x<sp/>&lt;=<sp/><ref refid="namespacehetest_1_1utils_1a959fdf1d396b9b4f4362486106e7f655" kindref="member">MaximumValue</ref>(BitShift),</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Operand<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacehetest_1_1utils_1a959fdf1d396b9b4f4362486106e7f655" kindref="member">MaximumValue</ref>(BitShift));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(y<sp/>&lt;<sp/>modulus,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;y<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>must<sp/>be<sp/>less<sp/>than<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modulus<sp/>&lt;=<sp/><ref refid="namespacehetest_1_1utils_1a959fdf1d396b9b4f4362486106e7f655" kindref="member">MaximumValue</ref>(BitShift),</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacehetest_1_1utils_1a959fdf1d396b9b4f4362486106e7f655" kindref="member">MaximumValue</ref>(BitShift));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>y_hi{0};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>y_lo{0};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BitShift<sp/>==<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_hi<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_lo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BitShift<sp/>==<sp/>52)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_hi<sp/>=<sp/>y<sp/>&gt;&gt;<sp/>12;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y_lo<sp/>=<sp/>y<sp/>&lt;&lt;<sp/>52;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>y_barrett<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a8c18008a708b9e3146f8c5bb95317415" kindref="member">DivideUInt128UInt64Lo</ref>(y_hi,<sp/>y_lo,<sp/>modulus);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MultiplyUIntModLazy&lt;BitShift&gt;(x,<sp/>y,<sp/>y_barrett,<sp/>modulus);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Adds<sp/>two<sp/>unsigned<sp/>64-bit<sp/>integers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>operand1<sp/>Number<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>operand2<sp/>Number<sp/>to<sp/>add</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>result<sp/>Stores<sp/>the<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@return<sp/>The<sp/>carry<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="namespacehetest_1_1utils_1a04c97740b30cea22b4dff98f4c13dc89" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a04c97740b30cea22b4dff98f4c13dc89" kindref="member">AddUInt64</ref>(uint64_t<sp/>operand1,<sp/>uint64_t<sp/>operand2,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>*result<sp/>=<sp/>operand1<sp/>+<sp/>operand2;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*result<sp/>&lt;<sp/>operand1);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>input<sp/>is<sp/>prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a406b9fa0a830692fe69b04d2e9023858" kindref="member">IsPrime</ref>(uint64_t<sp/>n);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>list<sp/>of<sp/>num_primes<sp/>primes<sp/>in<sp/>the<sp/>range<sp/>[2^(bit_size,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2^(bit_size+1)].<sp/>Ensures<sp/>each<sp/>prime<sp/>q<sp/>satisfies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>q<sp/>%<sp/>(2*ntt_size+1))<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>num_primes<sp/>Number<sp/>of<sp/>primes<sp/>to<sp/>generate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>bit_size<sp/>Bit<sp/>size<sp/>of<sp/>each<sp/>prime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>ntt_size<sp/>N<sp/>such<sp/>that<sp/>each<sp/>prime<sp/>q<sp/>satisfies<sp/>q<sp/>%<sp/>(2N)<sp/>==<sp/>1.<sp/>N<sp/>must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>power<sp/>of<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">std::vector&lt;uint64_t&gt;<sp/><ref refid="namespacehetest_1_1utils_1aa12bfb4bcbbd50266e460de87ee58cd5" kindref="member">GeneratePrimes</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_primes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit_size,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ntt_size<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>input<sp/>mod<sp/>modulus,<sp/>computed<sp/>via<sp/>Barrett<sp/>reduction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@param<sp/>q_barr<sp/>floor(2^64<sp/>/<sp/>p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1aa75d1b0f92c493fb35ee0fba2ad20861" kindref="member">BarrettReduce64</ref>(uint64_t<sp/>input,<sp/>uint64_t<sp/>modulus,<sp/>uint64_t<sp/>q_barr);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>InputModFactor&gt;</highlight></codeline>
<codeline lineno="157" refid="namespacehetest_1_1utils_1ae5181e8e294375bba17579f41f44f039" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1ae5181e8e294375bba17579f41f44f039" kindref="member">ReduceMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>modulus,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>twice_modulus<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>four_times_modulus<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(InputModFactor<sp/>==<sp/>1<sp/>||<sp/>InputModFactor<sp/>==<sp/>2<sp/>||</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InputModFactor<sp/>==<sp/>4<sp/>||<sp/>InputModFactor<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;InputModFactor<sp/>should<sp/>be<sp/>1,<sp/>2,<sp/>4,<sp/>or<sp/>8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(twice_modulus<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;twice_modulus<sp/>should<sp/>not<sp/>be<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>*twice_modulus)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>*twice_modulus;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InputModFactor<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(twice_modulus<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;twice_modulus<sp/>should<sp/>not<sp/>be<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(four_times_modulus<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;four_times_modulus<sp/>should<sp/>not<sp/>be<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>*four_times_modulus)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>*four_times_modulus;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>*twice_modulus)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>*twice_modulus;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Should<sp/>be<sp/>unreachable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hetest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hetest<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="classhetest_1_1utils_1_1NTT" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhetest_1_1utils_1_1NTT" kindref="compound">NTT</ref><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Adaptee,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="218" refid="structhetest_1_1utils_1_1NTT_1_1AllocatorAdapter" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhetest_1_1utils_1_1NTT_1_1AllocatorAdapter" kindref="compound">AllocatorAdapter</ref></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structhetest_1_1utils_1_1AllocatorInterface" kindref="compound">AllocatorInterface</ref>&lt;AllocatorAdapter&lt;Adaptee,<sp/>Args...&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structhetest_1_1utils_1_1NTT_1_1AllocatorAdapter_1acfe475e3767d7de45ae655e54d0846f0" kindref="member">AllocatorAdapter</ref>(Adaptee&amp;&amp;<sp/>_a,<sp/>Args&amp;&amp;...<sp/>args);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhetest_1_1utils_1_1NTT_1_1AllocatorAdapter_1acfe475e3767d7de45ae655e54d0846f0" kindref="member">AllocatorAdapter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Adaptee&amp;<sp/>_a,<sp/>Args&amp;...<sp/>args);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interface<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structhetest_1_1utils_1_1NTT_1_1AllocatorAdapter_1ac6b6542850337717e478d78477d89e6e" kindref="member">allocate_impl</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes_count);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhetest_1_1utils_1_1NTT_1_1AllocatorAdapter_1af3dc9adfd717dc77aaa973e37642c4a6" kindref="member">deallocate_impl</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Adaptee<sp/>alloc;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1NTT_1a3babb9b273fca5c7a7b8c782341e57c0" kindref="member">NTT</ref>();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1NTT_1af1677329c3f6051d20cf6ce6b28e6c94" kindref="member">~NTT</ref>();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1NTT_1a3babb9b273fca5c7a7b8c782341e57c0" kindref="member">NTT</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>q,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AllocatorBase&gt;<sp/>alloc_ptr<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Allocator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>AllocatorArgs&gt;</highlight></codeline>
<codeline lineno="250" refid="classhetest_1_1utils_1_1NTT_1a4735b3c9e5f15f9ec0d474a0342b046d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1NTT_1a4735b3c9e5f15f9ec0d474a0342b046d" kindref="member">NTT</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>q,<sp/>Allocator&amp;&amp;<sp/>a,<sp/>AllocatorArgs&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classhetest_1_1utils_1_1NTT" kindref="compound">NTT</ref>(degree,<sp/>q,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::static_pointer_cast&lt;<ref refid="structhetest_1_1utils_1_1AllocatorBase" kindref="compound">AllocatorBase</ref>&gt;(</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhetest_1_1utils_1_1NTT_1_1AllocatorAdapter" kindref="compound">AllocatorAdapter</ref>&lt;Allocator,<sp/>AllocatorArgs...&gt;&gt;(</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(a),<sp/>std::forward&lt;AllocatorArgs&gt;(args)...)))<sp/>{}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1NTT_1a3babb9b273fca5c7a7b8c782341e57c0" kindref="member">NTT</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>q,<sp/>uint64_t<sp/>root_of_unity,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AllocatorBase&gt;<sp/>alloc_ptr<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Allocator,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>AllocatorArgs&gt;</highlight></codeline>
<codeline lineno="272" refid="classhetest_1_1utils_1_1NTT_1a9877fee08ac585be045a20d8b561d8d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1NTT_1a9877fee08ac585be045a20d8b561d8d1" kindref="member">NTT</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>q,<sp/>uint64_t<sp/>root_of_unity,<sp/>Allocator&amp;&amp;<sp/>a,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AllocatorArgs&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classhetest_1_1utils_1_1NTT" kindref="compound">NTT</ref>(degree,<sp/>q,<sp/>root_of_unity,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::static_pointer_cast&lt;<ref refid="structhetest_1_1utils_1_1AllocatorBase" kindref="compound">AllocatorBase</ref>&gt;(</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhetest_1_1utils_1_1NTT_1_1AllocatorAdapter" kindref="compound">AllocatorAdapter</ref>&lt;Allocator,<sp/>AllocatorArgs...&gt;&gt;(</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(a),<sp/>std::forward&lt;AllocatorArgs&gt;(args)...)))<sp/>{}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1af23d2bdd9a1a5ca7fa8d5b7333776ad4" kindref="member">ComputeForward</ref>(uint64_t*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>operand,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor,<sp/>uint64_t<sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1a0452a339ac9025c750decbb6e011148b" kindref="member">ComputeInverse</ref>(uint64_t*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>operand,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor,<sp/>uint64_t<sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="classhetest_1_1utils_1_1NTT_1ae2d7985d8380a7c30cb0ca745aa900f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl" kindref="compound">NTTImpl</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;NTTImpl&gt;<sp/><ref refid="classhetest_1_1utils_1_1NTT_1ae2d7985d8380a7c30cb0ca745aa900f5" kindref="member">m_impl</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">};</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hetest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hetest<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl" kindref="compound">NTT::NTTImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a44a582a60a18e2231deab0930f172aca" kindref="member">NTTImpl</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>q,<sp/>uint64_t<sp/>root_of_unity,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AllocatorBase&gt;<sp/>alloc_ptr<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a44a582a60a18e2231deab0930f172aca" kindref="member">NTTImpl</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>q,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AllocatorBase&gt;<sp/>alloc_ptr<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1aeb47f4652bcb227cc5313db35a90ec8e" kindref="member">~NTTImpl</ref>();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1aab44369dc7690791845a12bc35587157" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1aab44369dc7690791845a12bc35587157" kindref="member">GetMinimalRootOfUnity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_w;<sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a035d8b09e911d41bb5cde863aa5ad128" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a035d8b09e911d41bb5cde863aa5ad128" kindref="member">GetDegree</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_degree;<sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a4d2dac7a361d9afc6cee579d7322bd46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a4d2dac7a361d9afc6cee579d7322bd46" kindref="member">GetModulus</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_q;<sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1aac30a427ad979f9b034bb04cbd6d8f27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref>&amp;<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1aac30a427ad979f9b034bb04cbd6d8f27" kindref="member">GetPrecon64RootOfUnityPowers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_precon64_root_of_unity_powers;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1ab534576b83c9c148ca285f304a5a4251" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1ab534576b83c9c148ca285f304a5a4251" kindref="member">GetPrecon64RootOfUnityPowersPtr</ref>()<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1aac30a427ad979f9b034bb04cbd6d8f27" kindref="member">GetPrecon64RootOfUnityPowers</ref>().data();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a1d155bcada1c332280941f5e082319a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref>&amp;<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a1d155bcada1c332280941f5e082319a6" kindref="member">GetPrecon52RootOfUnityPowers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_precon52_root_of_unity_powers;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a7c77eaeda15cabc6d3c2868ff796b79f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a7c77eaeda15cabc6d3c2868ff796b79f" kindref="member">GetPrecon52RootOfUnityPowersPtr</ref>()<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a1d155bcada1c332280941f5e082319a6" kindref="member">GetPrecon52RootOfUnityPowers</ref>().data();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a1f6d65ead7d22cbec7f985d6a9575ae6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a1f6d65ead7d22cbec7f985d6a9575ae6" kindref="member">GetRootOfUnityPowersPtr</ref>()<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a000757a957e7f530a4aa65018e2c3406" kindref="member">GetRootOfUnityPowers</ref>().data();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>vector<sp/>of<sp/>pre-computed<sp/>root<sp/>of<sp/>unity<sp/>powers<sp/>for<sp/>the<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>root<sp/>of<sp/>unity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a000757a957e7f530a4aa65018e2c3406" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref>&amp;<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a000757a957e7f530a4aa65018e2c3406" kindref="member">GetRootOfUnityPowers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_root_of_unity_powers;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>root<sp/>of<sp/>unity<sp/>at<sp/>index<sp/>i.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1adc89766c94e7c6dd13d08d712daec265" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1adc89766c94e7c6dd13d08d712daec265" kindref="member">GetRootOfUnityPower</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a000757a957e7f530a4aa65018e2c3406" kindref="member">GetRootOfUnityPowers</ref>()[i];<sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>vector<sp/>of<sp/>64-bit<sp/>pre-conditioned<sp/>pre-computed<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>powers<sp/>for<sp/>the<sp/>modulus<sp/>and<sp/>root<sp/>of<sp/>unity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a7b051fcc87e3f6f6df01b0d55e462777" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref>&amp;<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a7b051fcc87e3f6f6df01b0d55e462777" kindref="member">GetPrecon64InvRootOfUnityPowers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_precon64_inv_root_of_unity_powers;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a04d04b88f14f5e79e5fb529f624559a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a04d04b88f14f5e79e5fb529f624559a1" kindref="member">GetPrecon64InvRootOfUnityPowersPtr</ref>()<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a7b051fcc87e3f6f6df01b0d55e462777" kindref="member">GetPrecon64InvRootOfUnityPowers</ref>().data();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>vector<sp/>of<sp/>52-bit<sp/>pre-conditioned<sp/>pre-computed<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>powers<sp/>for<sp/>the<sp/>modulus<sp/>and<sp/>root<sp/>of<sp/>unity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a60f96251a7f9f4876fa5a551cd4c894e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref>&amp;<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a60f96251a7f9f4876fa5a551cd4c894e" kindref="member">GetPrecon52InvRootOfUnityPowers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_precon52_inv_root_of_unity_powers;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1af1bff60ad77232663df6c504b15cbe14" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1af1bff60ad77232663df6c504b15cbe14" kindref="member">GetPrecon52InvRootOfUnityPowersPtr</ref>()<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a60f96251a7f9f4876fa5a551cd4c894e" kindref="member">GetPrecon52InvRootOfUnityPowers</ref>().data();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a2afafd91a75934c0b004fcacb52506d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref>&amp;<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a2afafd91a75934c0b004fcacb52506d0" kindref="member">GetInvRootOfUnityPowers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inv_root_of_unity_powers;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a2eb4f6dc13583dfa039aff9c86090b8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a2eb4f6dc13583dfa039aff9c86090b8b" kindref="member">GetInvRootOfUnityPowersPtr</ref>()<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a2afafd91a75934c0b004fcacb52506d0" kindref="member">GetInvRootOfUnityPowers</ref>().data();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1ae321a809bd4a9121b4d0a9a3c8f22851" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1ae321a809bd4a9121b4d0a9a3c8f22851" kindref="member">GetInvRootOfUnityPower</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a2afafd91a75934c0b004fcacb52506d0" kindref="member">GetInvRootOfUnityPowers</ref>()[i];</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a23e8a1b8cd8f2a3700b9daa7d729dcfc" kindref="member">ComputeForward</ref>(uint64_t*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>operand,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor,<sp/>uint64_t<sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1aa9ddcd3bcd21f49f7c299959aae6baeb" kindref="member">ComputeInverse</ref>(uint64_t*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>operand,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor,<sp/>uint64_t<sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a44a2ac7f296bce27f708fb2e66ee1e5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a44a2ac7f296bce27f708fb2e66ee1e5a" kindref="member">s_max_degree_bits</ref>{20};<sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>power<sp/>of<sp/>2<sp/>in<sp/>degree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>modulus;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1ad457af43716b631a2471415bc604a530" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1ad457af43716b631a2471415bc604a530" kindref="member">s_max_modulus_bits</ref>{62};</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>bit<sp/>shift<sp/>used<sp/>in<sp/>Barrett<sp/>precomputation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a326fa5e71930b879eb060bc39ddd8d76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a326fa5e71930b879eb060bc39ddd8d76" kindref="member">s_default_shift_bits</ref>{64};</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bit<sp/>shift<sp/>used<sp/>in<sp/>Barrett<sp/>precomputation<sp/>when<sp/>IFMA<sp/>acceleration<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a62363392951d4f7e9f380c4d427bef4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a62363392951d4f7e9f380c4d427bef4b" kindref="member">s_ifma_shift_bits</ref>{52};</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>modulus<sp/>to<sp/>use<sp/>IFMA<sp/>acceleration<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>forward<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a7298cbc8ef00280200ac1bb1f416ca9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a7298cbc8ef00280200ac1bb1f416ca9a" kindref="member">s_max_fwd_ifma_modulus</ref>{1ULL<sp/>&lt;&lt;<sp/>(<ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a62363392951d4f7e9f380c4d427bef4b" kindref="member">s_ifma_shift_bits</ref><sp/>-<sp/>2)};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>bits<sp/>in<sp/>modulus<sp/>to<sp/>use<sp/>IFMA<sp/>acceleration<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inverse<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1adb491e973c3b2e087cc7ad5759fb6de4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1adb491e973c3b2e087cc7ad5759fb6de4" kindref="member">s_max_inv_ifma_modulus</ref>{1ULL<sp/>&lt;&lt;<sp/>(<ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a62363392951d4f7e9f380c4d427bef4b" kindref="member">s_ifma_shift_bits</ref><sp/>-<sp/>1)};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ComputeRootOfUnityPowers();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>m_degree;<sp/><sp/></highlight><highlight class="comment">//<sp/>N:<sp/>size<sp/>of<sp/>NTT<sp/>transform,<sp/>should<sp/>be<sp/>power<sp/>of<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>m_q;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prime<sp/>modulus.<sp/>Must<sp/>satisfy<sp/>q<sp/>==<sp/>1<sp/>mod<sp/>2n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>m_degree_bits;<sp/><sp/></highlight><highlight class="comment">//<sp/>log_2(m_degree)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bit<sp/>shift<sp/>to<sp/>use<sp/>in<sp/>computing<sp/>Barrett<sp/>reduction<sp/>for<sp/>forward<sp/>transform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>m_winv;<sp/><sp/></highlight><highlight class="comment">//<sp/>Inverse<sp/>of<sp/>minimal<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>m_w;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>2N&apos;th<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AllocatorBase&gt;<sp/>alloc;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vector<sp/>of<sp/>floor(W<sp/>*<sp/>2**52<sp/>/<sp/>m_q),<sp/>with<sp/>W<sp/>the<sp/>root<sp/>of<sp/>unity<sp/>powers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref><sp/>m_precon52_root_of_unity_powers;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vector<sp/>of<sp/>floor(W<sp/>*<sp/>2**64<sp/>/<sp/>m_q),<sp/>with<sp/>W<sp/>the<sp/>root<sp/>of<sp/>unity<sp/>powers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref><sp/>m_precon64_root_of_unity_powers;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>powers<sp/>of<sp/>the<sp/>minimal<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref><sp/>m_root_of_unity_powers;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vector<sp/>of<sp/>floor(W<sp/>*<sp/>2**52<sp/>/<sp/>m_q),<sp/>with<sp/>W<sp/>the<sp/>inverse<sp/>root<sp/>of<sp/>unity<sp/>powers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref><sp/>m_precon52_inv_root_of_unity_powers;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>vector<sp/>of<sp/>floor(W<sp/>*<sp/>2**64<sp/>/<sp/>m_q),<sp/>with<sp/>W<sp/>the<sp/>inverse<sp/>root<sp/>of<sp/>unity<sp/>powers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref><sp/>m_precon64_inv_root_of_unity_powers;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ad5b6a78d49dc8f6790f7fd2b10bf3db0" kindref="member">AlignedVector64&lt;uint64_t&gt;</ref><sp/>m_inv_root_of_unity_powers;</highlight></codeline>
<codeline lineno="440"><highlight class="normal">};</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a603d76eecc147f0388bfd3d4ed56a80e" kindref="member">ForwardTransformToBitReverse64</ref>(uint64_t*<sp/>operand,<sp/>uint64_t<sp/>n,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modulus,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>root_of_unity_powers,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>precon_root_of_unity_powers,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>output_mod_factor<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a17097893112c25d41b68a2469e348c97" kindref="member">ReferenceForwardTransformToBitReverse</ref>(</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/>operand,<sp/>uint64_t<sp/>n,<sp/>uint64_t<sp/>modulus,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>root_of_unity_powers);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1aab875bdc62d230db2837749ab27c3f4f" kindref="member">InverseTransformFromBitReverse64</ref>(</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/>operand,<sp/>uint64_t<sp/>n,<sp/>uint64_t<sp/>modulus,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>inv_root_of_unity_powers,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>precon_inv_root_of_unity_powers,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor<sp/>=<sp/>1,<sp/>uint64_t<sp/>output_mod_factor<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>arguments<sp/>satisfy<sp/>constraints<sp/>for<sp/>negacyclic<sp/>NTT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1af721dbd58c61bb7b9220c8bb315488a9" kindref="member">CheckNTTArguments</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hetest</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ymeng12/he-fpga-github/tests/test_utils/ntt.hpp"/>
  </compounddef>
</doxygen>
