<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="ntt_8cpp" kind="file">
    <compoundname>ntt.cpp</compoundname>
    <includes refid="ntt_8hpp" local="yes">ntt.hpp</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <includes local="no">memory</includes>
    <includes local="no">random</includes>
    <includes local="no">utility</includes>
    <incdepgraph>
      <node id="109">
        <label>limits</label>
      </node>
      <node id="106">
        <label>cstdint</label>
      </node>
      <node id="103">
        <label>utils-test.hpp</label>
        <link refid="utils-test_8hpp"/>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>cmath</label>
      </node>
      <node id="114">
        <label>random</label>
      </node>
      <node id="101">
        <label>ntt.cpp</label>
        <link refid="ntt.cpp"/>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>vector</label>
      </node>
      <node id="111">
        <label>utility</label>
      </node>
      <node id="107">
        <label>cstdlib</label>
      </node>
      <node id="108">
        <label>iostream</label>
      </node>
      <node id="105">
        <label>cstddef</label>
      </node>
      <node id="102">
        <label>ntt.hpp</label>
        <link refid="ntt_8hpp"/>
        <childnode refid="103" relation="include">
        </childnode>
      </node>
      <node id="113">
        <label>cstring</label>
      </node>
      <node id="110">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehetest">hetest</innernamespace>
    <innernamespace refid="namespacehetest_1_1utils">hetest::utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ntt_8hpp" kindref="compound">ntt.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hetest<sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a3f409e865de8022c3ea069458b3913d6" kindref="member">InverseUIntMod</ref>(uint64_t<sp/>input,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>a<sp/>=<sp/>input<sp/>%<sp/>modulus;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(a<sp/>!=<sp/>0,<sp/>input<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>does<sp/>not<sp/>have<sp/>a<sp/>InverseMod&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(modulus<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>m0<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(modulus);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>q<sp/>is<sp/>quotient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>q<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a<sp/>/<sp/>modulus);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(modulus);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modulus<sp/>=<sp/>a<sp/>%<sp/>modulus;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>y<sp/>and<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>-<sp/>q<sp/>*<sp/>y;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>x<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)<sp/>x<sp/>+=<sp/>m0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uint64_t(x);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1aa75d1b0f92c493fb35ee0fba2ad20861" kindref="member">BarrettReduce64</ref>(uint64_t<sp/>input,<sp/>uint64_t<sp/>modulus,<sp/>uint64_t<sp/>q_barr)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(modulus<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;modulus<sp/>==<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>q<sp/>=<sp/>MultiplyUInt64Hi&lt;64&gt;(input,<sp/>q_barr);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>q_times_input<sp/>=<sp/>input<sp/>-<sp/>q<sp/>*<sp/>modulus;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q_times_input<sp/>&gt;=<sp/>modulus<sp/>?<sp/>q_times_input<sp/>-<sp/>modulus<sp/>:<sp/>q_times_input;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a7e1e09f25d4ed5c4b8ed51fd0e7831e0" kindref="member">MultiplyUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(modulus<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;modulus<sp/>==<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(x<sp/>&lt;<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;x<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(y<sp/>&lt;<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;y<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>prod_hi,<sp/>prod_lo;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1af38bb2ec0ec65a229877d4a3bdbe787f" kindref="member">MultiplyUInt64</ref>(x,<sp/>y,<sp/>&amp;prod_hi,<sp/>&amp;prod_lo);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a842729d820bda62d95f80ebdde202ac6" kindref="member">BarrettReduce128</ref>(prod_hi,<sp/>prod_lo,<sp/>modulus);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a05ab63c2edf76c87493770c59b9fbdde" kindref="member">MultiplyMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>y_precon,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>q<sp/>=<sp/>MultiplyUInt64Hi&lt;64&gt;(x,<sp/>y_precon);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>x<sp/>*<sp/>y<sp/>-<sp/>q<sp/>*<sp/>modulus;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q<sp/>&gt;=<sp/>modulus<sp/>?<sp/>q<sp/>-<sp/>modulus<sp/>:<sp/>q;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a2703d3db0db5510fac010b973ef9abdf" kindref="member">AddUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(x<sp/>&lt;<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;x<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(y<sp/>&lt;<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;y<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>sum<sp/>=<sp/>x<sp/>+<sp/>y;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(sum<sp/>&gt;=<sp/>modulus)<sp/>?<sp/>(sum<sp/>-<sp/>modulus)<sp/>:<sp/>sum;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a3ed335150e26cfd368e40a34e3af2f72" kindref="member">SubUIntMod</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>y,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(x<sp/>&lt;<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;x<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(y<sp/>&lt;<sp/>modulus,<sp/></highlight><highlight class="stringliteral">&quot;y<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>diff<sp/>=<sp/>(x<sp/>+<sp/>modulus)<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(diff<sp/>&gt;=<sp/>modulus)<sp/>?<sp/>(diff<sp/>-<sp/>modulus)<sp/>:<sp/>diff;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>base^exp<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1af4225e8fb310a252be626d55547299a4" kindref="member">PowMod</ref>(uint64_t<sp/>base,<sp/>uint64_t<sp/>exp,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>base<sp/>%=<sp/>modulus;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>result<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(exp<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a7e1e09f25d4ed5c4b8ed51fd0e7831e0" kindref="member">MultiplyUIntMod</ref>(result,<sp/>base,<sp/>modulus);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a7e1e09f25d4ed5c4b8ed51fd0e7831e0" kindref="member">MultiplyUIntMod</ref>(base,<sp/>base,<sp/>modulus);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>whether<sp/>root<sp/>is<sp/>a<sp/>degree-th<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>degree<sp/>must<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1ae86c27a5d75d8b02cfb9b17eae7251a7" kindref="member">IsPrimitiveRoot</ref>(uint64_t<sp/>root,<sp/>uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(<ref refid="namespacehetest_1_1utils_1a968364009ecc6add3849c161d7a1088f" kindref="member">IsPowerOfTwo</ref>(degree),<sp/>degree<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>a<sp/>power<sp/>of<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>root^(degree/2)<sp/>==<sp/>-1<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1af4225e8fb310a252be626d55547299a4" kindref="member">PowMod</ref>(root,<sp/>degree<sp/>/<sp/>2,<sp/>modulus)<sp/>==<sp/>(modulus<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tries<sp/>to<sp/>return<sp/>a<sp/>primitive<sp/>degree-th<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>throw<sp/>error<sp/>if<sp/>no<sp/>root<sp/>is<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1ab90a6b556a35edc30cdef194aefad1a6" kindref="member">GeneratePrimitiveRoot</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>std::default_random_engine<sp/>generator;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;uint64_t&gt;<sp/>distribution(0,<sp/>modulus<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>divide<sp/>modulus-1<sp/>by<sp/>degree<sp/>to<sp/>get<sp/>the<sp/>size<sp/>of<sp/>the<sp/>quotient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>size_entire_group<sp/>=<sp/>modulus<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>size<sp/>of<sp/>quotient<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>size_quotient_group<sp/>=<sp/>size_entire_group<sp/>/<sp/>degree;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trial<sp/>=<sp/>0;<sp/>trial<sp/>&lt;<sp/>200;<sp/>++trial)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>root<sp/>=<sp/>distribution(generator);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1af4225e8fb310a252be626d55547299a4" kindref="member">PowMod</ref>(root,<sp/>size_quotient_group,<sp/>modulus);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacehetest_1_1utils_1ae86c27a5d75d8b02cfb9b17eae7251a7" kindref="member">IsPrimitiveRoot</ref>(root,<sp/>degree,<sp/>modulus))<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>root;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>primitive<sp/>root<sp/>found<sp/>for<sp/>degree<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>degree<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>modulus<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>whether<sp/>root<sp/>is<sp/>a<sp/>degree-th<sp/>root<sp/>of<sp/>unity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>degree<sp/>must<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1a1f9bf85bb99c3f6d6b9a72c3c2e85d3e" kindref="member">MinimalPrimitiveRoot</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(<ref refid="namespacehetest_1_1utils_1a968364009ecc6add3849c161d7a1088f" kindref="member">IsPowerOfTwo</ref>(degree),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Degere<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>degree<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>a<sp/>power<sp/>of<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>root<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1ab90a6b556a35edc30cdef194aefad1a6" kindref="member">GeneratePrimitiveRoot</ref>(degree,<sp/>modulus);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>generator_sq<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a7e1e09f25d4ed5c4b8ed51fd0e7831e0" kindref="member">MultiplyUIntMod</ref>(root,<sp/>root,<sp/>modulus);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>current_generator<sp/>=<sp/>root;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>min_root<sp/>=<sp/>root;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>root^(degree/2)<sp/>==<sp/>-1<sp/>mod<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>degree;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_generator<sp/>&lt;<sp/>min_root)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_root<sp/>=<sp/>current_generator;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_generator<sp/>=</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1a7e1e09f25d4ed5c4b8ed51fd0e7831e0" kindref="member">MultiplyUIntMod</ref>(current_generator,<sp/>generator_sq,<sp/>modulus);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_root;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">uint64_t<sp/><ref refid="namespacehetest_1_1utils_1af9582ceaf67142fca2879962168298f6" kindref="member">ReverseBitsUInt</ref>(uint64_t<sp/>x,<sp/>uint64_t<sp/>bit_width)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_width<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>rev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>bit_width;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rev<sp/>|=<sp/>((x<sp/>&amp;<sp/>1)<sp/>&lt;&lt;<sp/>(i<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rev;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Miller-Rabin<sp/>primality<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a406b9fa0a830692fe69b04d2e9023858" kindref="member">IsPrime</ref>(uint64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>n<sp/>&lt;<sp/>2^64,<sp/>so<sp/>it<sp/>is<sp/>enough<sp/>to<sp/>test<sp/>a=2,<sp/>3,<sp/>5,<sp/>7,<sp/>11,<sp/>13,<sp/>17,<sp/>19,<sp/>23,<sp/>29,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>31,<sp/>and<sp/>37.<sp/>See</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test#Testing_against_small_sets_of_bases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint64_t&gt;<sp/>as{2,<sp/><sp/>3,<sp/><sp/>5,<sp/><sp/>7,<sp/><sp/>11,<sp/>13,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17,<sp/>19,<sp/>23,<sp/>29,<sp/>31,<sp/>37};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>a<sp/>:<sp/>as)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>==<sp/>a)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>%<sp/>a<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>n<sp/>==<sp/>2**r<sp/>*<sp/>d<sp/>+<sp/>1<sp/>with<sp/>d<sp/>odd.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>r<sp/>=<sp/>63;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(r<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>two_pow_r<sp/>=<sp/>(1ULL<sp/>&lt;&lt;<sp/>r);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n<sp/>-<sp/>1)<sp/>%<sp/>two_pow_r<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--r;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(r<sp/>!=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>factoring<sp/>n<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>d<sp/>=<sp/>(n<sp/>-<sp/>1)<sp/>/<sp/>(1ULL<sp/>&lt;&lt;<sp/>r);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(n<sp/>==<sp/>(1ULL<sp/>&lt;&lt;<sp/>r)<sp/>*<sp/>d<sp/>+<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>factoring<sp/>n<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(d<sp/>%<sp/>2<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;d<sp/>is<sp/>even&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>a<sp/>:<sp/>as)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>x<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1af4225e8fb310a252be626d55547299a4" kindref="member">PowMod</ref>(a,<sp/>d,<sp/>n);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>==<sp/>1)<sp/>||<sp/>(x<sp/>==<sp/>n<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>prime<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>r;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1af4225e8fb310a252be626d55547299a4" kindref="member">PowMod</ref>(x,<sp/>2,<sp/>n);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>n<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prime<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!prime)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">std::vector&lt;uint64_t&gt;<sp/><ref refid="namespacehetest_1_1utils_1aa12bfb4bcbbd50266e460de87ee58cd5" kindref="member">GeneratePrimes</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_primes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bit_size,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ntt_size)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(num_primes<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;num_primes<sp/>==<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(<ref refid="namespacehetest_1_1utils_1a968364009ecc6add3849c161d7a1088f" kindref="member">IsPowerOfTwo</ref>(ntt_size),</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ntt_size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ntt_size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>a<sp/>power<sp/>of<sp/>two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(<ref refid="namespacehetest_1_1utils_1acb4bd5dad64e6c1db0f2b4e1afaa63db" kindref="member">Log2</ref>(ntt_size)<sp/>&lt;<sp/>bit_size,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;log2(ntt_size)<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacehetest_1_1utils_1acb4bd5dad64e6c1db0f2b4e1afaa63db" kindref="member">Log2</ref>(ntt_size)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>should<sp/>be<sp/>less<sp/>than<sp/>bit_size<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>bit_size);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>value<sp/>=<sp/>(1ULL<sp/>&lt;&lt;<sp/>bit_size)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(value<sp/>&lt;<sp/>(1ULL<sp/>&lt;&lt;<sp/>(bit_size<sp/>+<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacehetest_1_1utils_1a406b9fa0a830692fe69b04d2e9023858" kindref="member">IsPrime</ref>(value))<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.emplace_back(value);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.size()<sp/>==<sp/>num_primes)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>+=<sp/>2<sp/>*<sp/>ntt_size;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>find<sp/>enough<sp/>primes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hetest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">hetest<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">utils<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="namespacehetest_1_1utils_1a3f7f347b9f62a88014bdcc45f7987846" kindref="member">AllocatorStrategyPtr</ref><sp/><ref refid="namespacehetest_1_1utils_1ac87aad4fed0f78704edd9639dcc44e03" kindref="member">mallocStrategy</ref><sp/>=</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1a3f7f347b9f62a88014bdcc45f7987846" kindref="member">AllocatorStrategyPtr</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>details::MallocStrategy);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><ref refid="classhetest_1_1utils_1_1NTT_1_1NTTImpl_1a44a582a60a18e2231deab0930f172aca" kindref="member">NTT::NTTImpl::NTTImpl</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>q,<sp/>uint64_t<sp/>root_of_unity,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AllocatorBase&gt;<sp/>alloc_ptr)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_degree(degree),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_q(q),</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_w(root_of_unity),</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alloc(alloc_ptr),</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_precon52_root_of_unity_powers(AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc)),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_precon64_root_of_unity_powers(AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc)),</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_root_of_unity_powers(AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc)),</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_precon52_inv_root_of_unity_powers(</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc)),</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_precon64_inv_root_of_unity_powers(</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc)),</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_inv_root_of_unity_powers(AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc))<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc<sp/>=<sp/>alloc_ptr;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(<ref refid="namespacehetest_1_1utils_1af721dbd58c61bb7b9220c8bb315488a9" kindref="member">CheckNTTArguments</ref>(degree,<sp/>q),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1ae86c27a5d75d8b02cfb9b17eae7251a7" kindref="member">IsPrimitiveRoot</ref>(m_w,<sp/>2<sp/>*<sp/>degree,<sp/>q),</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_w<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>a<sp/>primitive<sp/>2*&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>degree<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;th<sp/>root<sp/>of<sp/>unity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>m_degree_bits<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1acb4bd5dad64e6c1db0f2b4e1afaa63db" kindref="member">Log2</ref>(m_degree);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>m_winv<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a3f409e865de8022c3ea069458b3913d6" kindref="member">InverseUIntMod</ref>(m_w,<sp/>m_q);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>ComputeRootOfUnityPowers();</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">NTT::NTTImpl::NTTImpl(uint64_t<sp/>degree,<sp/>uint64_t<sp/>q,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AllocatorBase&gt;<sp/>alloc_ptr)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>NTTImpl(degree,<sp/>q,<sp/><ref refid="namespacehetest_1_1utils_1a1f9bf85bb99c3f6d6b9a72c3c2e85d3e" kindref="member">MinimalPrimitiveRoot</ref>(2<sp/>*<sp/>degree,<sp/>q),<sp/>alloc_ptr)<sp/>{}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">NTT::NTTImpl::~NTTImpl()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NTT::NTTImpl::ComputeRootOfUnityPowers()<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>AlignedVector64&lt;uint64_t&gt;<sp/>root_of_unity_powers(</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_degree,<sp/>0,<sp/>AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>AlignedVector64&lt;uint64_t&gt;<sp/>inv_root_of_unity_powers(</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_degree,<sp/>0,<sp/>AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>64-bit<sp/>preconditioning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>root_of_unity_powers[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>inv_root_of_unity_powers[0]<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a3f409e865de8022c3ea069458b3913d6" kindref="member">InverseUIntMod</ref>(1,<sp/>m_q);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>prev_idx<sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>m_degree;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1af9582ceaf67142fca2879962168298f6" kindref="member">ReverseBitsUInt</ref>(i,<sp/>m_degree_bits);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root_of_unity_powers[idx]<sp/>=</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1a7e1e09f25d4ed5c4b8ed51fd0e7831e0" kindref="member">MultiplyUIntMod</ref>(root_of_unity_powers[prev_idx],<sp/>m_w,<sp/>m_q);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inv_root_of_unity_powers[idx]<sp/>=</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1a3f409e865de8022c3ea069458b3913d6" kindref="member">InverseUIntMod</ref>(root_of_unity_powers[idx],<sp/>m_q);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_idx<sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reordering<sp/>inv_root_of_powers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>AlignedVector64&lt;uint64_t&gt;<sp/>temp(m_degree,<sp/>0,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>temp[0]<sp/>=<sp/>inv_root_of_unity_powers[0];</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>idx<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>(m_degree<sp/>&gt;&gt;<sp/>1);<sp/>m<sp/>&gt;<sp/>0;<sp/>m<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp[idx]<sp/>=<sp/>inv_root_of_unity_powers[m<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx++;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>inv_root_of_unity_powers<sp/>=<sp/>std::move(temp);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>64-bit<sp/>preconditioned<sp/>root<sp/>of<sp/>unity<sp/>powers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>AlignedVector64&lt;uint64_t&gt;<sp/>precon64_root_of_unity_powers(</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc)));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>precon64_root_of_unity_powers.reserve(m_degree);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>root_of_unity<sp/>:<sp/>root_of_unity_powers)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiplyFactor<sp/>mf(root_of_unity,<sp/>64,<sp/>m_q);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precon64_root_of_unity_powers.push_back(mf.BarrettFactor());</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>NTT::NTTImpl::GetPrecon64RootOfUnityPowers()<sp/>=</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(precon64_root_of_unity_powers);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>52-bit<sp/>preconditioned<sp/>root<sp/>of<sp/>unity<sp/>powers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(has_avx512ifma)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlignedVector64&lt;uint64_t&gt;<sp/>precon52_root_of_unity_powers(</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc)));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precon52_root_of_unity_powers.reserve(m_degree);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>root_of_unity<sp/>:<sp/>root_of_unity_powers)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiplyFactor<sp/>mf(root_of_unity,<sp/>52,<sp/>m_q);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precon52_root_of_unity_powers.push_back(mf.BarrettFactor());</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NTT::NTTImpl::GetPrecon52RootOfUnityPowers()<sp/>=</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(precon52_root_of_unity_powers);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>NTT::NTTImpl::GetRootOfUnityPowers()<sp/>=<sp/>std::move(root_of_unity_powers);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>64-bit<sp/>preconditioned<sp/>inverse<sp/>root<sp/>of<sp/>unity<sp/>powers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>AlignedVector64&lt;uint64_t&gt;<sp/>precon64_inv_root_of_unity_powers(</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc)));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>precon64_inv_root_of_unity_powers.reserve(m_degree);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>inv_root_of_unity<sp/>:<sp/>inv_root_of_unity_powers)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiplyFactor<sp/>mf(inv_root_of_unity,<sp/>64,<sp/>m_q);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precon64_inv_root_of_unity_powers.push_back(mf.BarrettFactor());</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>NTT::NTTImpl::GetPrecon64InvRootOfUnityPowers()<sp/>=</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(precon64_inv_root_of_unity_powers);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>52-bit<sp/>preconditioned<sp/>inverse<sp/>root<sp/>of<sp/>unity<sp/>powers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(has_avx512ifma)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlignedVector64&lt;uint64_t&gt;<sp/>precon52_inv_root_of_unity_powers(</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(AlignedAllocator&lt;uint64_t,<sp/>64&gt;(alloc)));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precon52_inv_root_of_unity_powers.reserve(m_degree);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>inv_root_of_unity<sp/>:<sp/>inv_root_of_unity_powers)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiplyFactor<sp/>mf(inv_root_of_unity,<sp/>52,<sp/>m_q);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precon52_inv_root_of_unity_powers.push_back(mf.BarrettFactor());</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NTT::NTTImpl::GetPrecon52InvRootOfUnityPowers()<sp/>=</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(precon52_inv_root_of_unity_powers);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>NTT::NTTImpl::GetInvRootOfUnityPowers()<sp/>=</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(inv_root_of_unity_powers);</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NTT::NTTImpl::ComputeForward(uint64_t*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>operand,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>output_mod_factor)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(result<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;result<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(operand<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a211847bac88927d6b3426fc78dc052be" kindref="member">UTILS_CHECK_BOUNDS</ref>(</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operand,<sp/>m_degree,<sp/>m_q<sp/>*<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;value<sp/>in<sp/>operand<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_q<sp/>*<sp/>input_mod_factor);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>!=<sp/>operand)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(result,<sp/>operand,<sp/>m_degree<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>root_of_unity_powers<sp/>=<sp/>GetRootOfUnityPowersPtr();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>precon_root_of_unity_powers<sp/>=</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPrecon64RootOfUnityPowersPtr();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1a603d76eecc147f0388bfd3d4ed56a80e" kindref="member">ForwardTransformToBitReverse64</ref>(result,<sp/>m_degree,<sp/>m_q,<sp/>root_of_unity_powers,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precon_root_of_unity_powers,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_mod_factor,<sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NTT::NTTImpl::ComputeInverse(uint64_t*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>operand,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>output_mod_factor)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(operand<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(operand<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a211847bac88927d6b3426fc78dc052be" kindref="member">UTILS_CHECK_BOUNDS</ref>(operand,<sp/>m_degree,<sp/>m_q<sp/>*<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_q<sp/>*<sp/>input_mod_factor);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operand<sp/>!=<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(result,<sp/>operand,<sp/>m_degree<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>inv_root_of_unity_powers<sp/>=<sp/>GetInvRootOfUnityPowersPtr();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>precon_inv_root_of_unity_powers<sp/>=</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPrecon64InvRootOfUnityPowersPtr();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacehetest_1_1utils_1aab875bdc62d230db2837749ab27c3f4f" kindref="member">InverseTransformFromBitReverse64</ref>(</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result,<sp/>m_degree,<sp/>m_q,<sp/>inv_root_of_unity_powers,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precon_inv_root_of_unity_powers,<sp/>input_mod_factor,<sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NTT<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><ref refid="namespaceintel_1_1hexl_1aba58174859e0cfb87d493606a9e8a530" kindref="member">NTT::NTT</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><ref refid="namespaceintel_1_1hexl_1aba58174859e0cfb87d493606a9e8a530" kindref="member">NTT::NTT</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>q,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AllocatorBase&gt;<sp/>alloc_ptr<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>{}*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_impl(std::make_shared&lt;<ref refid="namespaceintel_1_1hexl_1aba58174859e0cfb87d493606a9e8a530" kindref="member">NTT</ref>::NTTImpl&gt;(degree,<sp/>q,<sp/>alloc_ptr))<sp/>{}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><ref refid="namespaceintel_1_1hexl_1aba58174859e0cfb87d493606a9e8a530" kindref="member">NTT::NTT</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>q,<sp/>uint64_t<sp/>root_of_unity,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;AllocatorBase&gt;<sp/>alloc_ptr<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>{}*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_impl(std::make_shared&lt;<ref refid="namespaceintel_1_1hexl_1aba58174859e0cfb87d493606a9e8a530" kindref="member">NTT</ref>::NTTImpl&gt;(degree,<sp/>q,<sp/>root_of_unity,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_ptr))<sp/>{}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">NTT::~NTT()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NTT::ComputeForward(uint64_t*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>operand,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>output_mod_factor)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(operand<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(result<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;result<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_mod_factor<sp/>==<sp/>1<sp/>||<sp/>input_mod_factor<sp/>==<sp/>2<sp/>||<sp/>input_mod_factor<sp/>==<sp/>4,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;input_mod_factor<sp/>must<sp/>be<sp/>1,<sp/>2<sp/>or<sp/>4;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>input_mod_factor);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(output_mod_factor<sp/>==<sp/>1<sp/>||<sp/>output_mod_factor<sp/>==<sp/>4,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;output_mod_factor<sp/>must<sp/>be<sp/>1<sp/>or<sp/>4;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;ComputeForward(result,<sp/>operand,<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NTT::ComputeInverse(uint64_t*<sp/>result,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>operand,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>output_mod_factor)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(operand<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(result<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;result<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(input_mod_factor<sp/>==<sp/>1<sp/>||<sp/>input_mod_factor<sp/>==<sp/>2,</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;input_mod_factor<sp/>must<sp/>be<sp/>1<sp/>or<sp/>2;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>input_mod_factor);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(output_mod_factor<sp/>==<sp/>1<sp/>||<sp/>output_mod_factor<sp/>==<sp/>2,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;output_mod_factor<sp/>must<sp/>be<sp/>1<sp/>or<sp/>2;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>m_impl-&gt;ComputeInverse(result,<sp/>operand,<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Free<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a603d76eecc147f0388bfd3d4ed56a80e" kindref="member">ForwardTransformToBitReverse64</ref>(uint64_t*<sp/>operand,<sp/>uint64_t<sp/>n,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>modulus,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>root_of_unity_powers,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>precon_root_of_unity_powers,</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>output_mod_factor)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(<ref refid="namespacehetest_1_1utils_1af721dbd58c61bb7b9220c8bb315488a9" kindref="member">CheckNTTArguments</ref>(n,<sp/>modulus),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a211847bac88927d6b3426fc78dc052be" kindref="member">UTILS_CHECK_BOUNDS</ref>(operand,<sp/>n,<sp/>modulus<sp/>*<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>exceeds<sp/>bound<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus<sp/>*<sp/>input_mod_factor);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(root_of_unity_powers<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;root_of_unity_powers<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(precon_root_of_unity_powers<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;precon_root_of_unity_powers<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input_mod_factor<sp/>==<sp/>1<sp/>||<sp/>input_mod_factor<sp/>==<sp/>2<sp/>||<sp/>input_mod_factor<sp/>==<sp/>4,</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;input_mod_factor<sp/>must<sp/>be<sp/>1,<sp/>2,<sp/>or<sp/>4;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>input_mod_factor);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)(input_mod_factor);<sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>unused<sp/>parameter<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(output_mod_factor<sp/>==<sp/>1<sp/>||<sp/>output_mod_factor<sp/>==<sp/>4,</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;output_mod_factor<sp/>must<sp/>be<sp/>1<sp/>or<sp/>4;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>twice_mod<sp/>=<sp/>modulus<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(n<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>1;<sp/>m<sp/>&lt;<sp/>n;<sp/>m<sp/>&lt;&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j2<sp/>=<sp/>j1<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>W_op<sp/>=<sp/>root_of_unity_powers[m<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>W_precon<sp/>=<sp/>precon_root_of_unity_powers[m<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>X<sp/>=<sp/>operand<sp/>+<sp/>j1;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>Y<sp/>=<sp/>X<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>tx;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>T;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>j1;<sp/>j<sp/>&lt;<sp/>j2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Harvey<sp/>butterfly:<sp/>assume<sp/>X,<sp/>Y<sp/>in<sp/>[0,<sp/>4q),<sp/>and<sp/>return<sp/>X&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y&apos;<sp/>in<sp/>[0,<sp/>4q).<sp/>Such<sp/>that<sp/>X&apos;,<sp/>Y&apos;<sp/>=<sp/>X<sp/>+<sp/>WY,<sp/>X<sp/>-<sp/>WY<sp/>(mod<sp/>q).<sp/>See</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Algorithm<sp/>4<sp/>of<sp/>https://arxiv.org/pdf/1205.2926.pdf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(*X<sp/>&lt;<sp/>modulus<sp/>*<sp/>4,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;input<sp/>X<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*X)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(*Y<sp/>&lt;<sp/>modulus<sp/>*<sp/>4,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;input<sp/>Y<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(*Y)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>(*X<sp/>&gt;=<sp/>twice_mod)<sp/>?<sp/>(*X<sp/>-<sp/>twice_mod)<sp/>:<sp/>*X;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>MultiplyUIntModLazy&lt;64&gt;(*Y,<sp/>W_op,<sp/>W_precon,<sp/>modulus);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*X++<sp/>=<sp/>tx<sp/>+<sp/>T;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Y++<sp/>=<sp/>tx<sp/>+<sp/>twice_mod<sp/>-<sp/>T;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(tx<sp/>+<sp/>T<sp/>&lt;<sp/>modulus<sp/>*<sp/>4,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ouput<sp/>X<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(tx<sp/>+<sp/>T)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>+<sp/>twice_mod<sp/>-<sp/>T<sp/>&lt;<sp/>modulus<sp/>*<sp/>4,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;output<sp/>Y<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(tx<sp/>+<sp/>twice_mod<sp/>-<sp/>T)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>too<sp/>large&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>+=<sp/>(t<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_mod_factor<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operand[i]<sp/>&gt;=<sp/>twice_mod)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operand[i]<sp/>-=<sp/>twice_mod;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operand[i]<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operand[i]<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(operand[i]<sp/>&lt;<sp/>modulus,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>modulus<sp/>reduction<sp/>in<sp/>NTT<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>operand[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1a17097893112c25d41b68a2469e348c97" kindref="member">ReferenceForwardTransformToBitReverse</ref>(</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/>operand,<sp/>uint64_t<sp/>n,<sp/>uint64_t<sp/>modulus,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>root_of_unity_powers)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(<ref refid="namespacehetest_1_1utils_1af721dbd58c61bb7b9220c8bb315488a9" kindref="member">CheckNTTArguments</ref>(n,<sp/>modulus),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(root_of_unity_powers<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;root_of_unity_powers<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(operand<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(n<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>1;<sp/>m<sp/>&lt;<sp/>n;<sp/>m<sp/>&lt;&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j2<sp/>=<sp/>j1<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>W_op<sp/>=<sp/>root_of_unity_powers[m<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>X<sp/>=<sp/>operand<sp/>+<sp/>j1;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>Y<sp/>=<sp/>X<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>j1;<sp/>j<sp/>&lt;<sp/>j2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>tx<sp/>=<sp/>*X;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X&apos;,<sp/>Y&apos;<sp/>=<sp/>X<sp/>+<sp/>WY,<sp/>X<sp/>-<sp/>WY<sp/>(mod<sp/>q).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>W_x_Y<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a7e1e09f25d4ed5c4b8ed51fd0e7831e0" kindref="member">MultiplyUIntMod</ref>(*Y,<sp/>W_op,<sp/>modulus);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*X++<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a2703d3db0db5510fac010b973ef9abdf" kindref="member">AddUIntMod</ref>(tx,<sp/>W_x_Y,<sp/>modulus);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Y++<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a3ed335150e26cfd368e40a34e3af2f72" kindref="member">SubUIntMod</ref>(tx,<sp/>W_x_Y,<sp/>modulus);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>+=<sp/>(t<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1aab875bdc62d230db2837749ab27c3f4f" kindref="member">InverseTransformFromBitReverse64</ref>(</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/>operand,<sp/>uint64_t<sp/>n,<sp/>uint64_t<sp/>modulus,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>inv_root_of_unity_powers,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*<sp/>precon_inv_root_of_unity_powers,<sp/>uint64_t<sp/>input_mod_factor,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>output_mod_factor)<sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(<ref refid="namespacehetest_1_1utils_1af721dbd58c61bb7b9220c8bb315488a9" kindref="member">CheckNTTArguments</ref>(n,<sp/>modulus),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(inv_root_of_unity_powers<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;inv_root_of_unity_powers<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(precon_inv_root_of_unity_powers<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;precon_inv_root_of_unity_powers<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(operand<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;operand<sp/>==<sp/>nullptr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(input_mod_factor<sp/>==<sp/>1<sp/>||<sp/>input_mod_factor<sp/>==<sp/>2,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;input_mod_factor<sp/>must<sp/>be<sp/>1<sp/>or<sp/>2;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>input_mod_factor);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)(input_mod_factor);<sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>unused<sp/>parameter<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(output_mod_factor<sp/>==<sp/>1<sp/>||<sp/>output_mod_factor<sp/>==<sp/>2,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;output_mod_factor<sp/>must<sp/>be<sp/>1<sp/>or<sp/>2;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>output_mod_factor);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>twice_mod<sp/>=<sp/>modulus<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>root_index<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>(n<sp/>&gt;&gt;<sp/>1);<sp/>m<sp/>&gt;<sp/>1;<sp/>m<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m;<sp/>i++,<sp/>root_index++)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j2<sp/>=<sp/>j1<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>W_op<sp/>=<sp/>inv_root_of_unity_powers[root_index];</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>W_op_precon<sp/>=</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precon_inv_root_of_unity_powers[root_index];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>X<sp/>=<sp/>operand<sp/>+<sp/>j1;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>Y<sp/>=<sp/>X<sp/>+<sp/>t;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>tx;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>ty;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>j1;<sp/>j<sp/>&lt;<sp/>j2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Harvey<sp/>butterfly:<sp/>assume<sp/>X,<sp/>Y<sp/>in<sp/>[0,<sp/>2q),<sp/>and<sp/>return<sp/>X&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Y&apos;<sp/>in<sp/>[0,<sp/>2q).<sp/>X&apos;,<sp/>Y&apos;<sp/>=<sp/>X<sp/>+<sp/>Y<sp/>(mod<sp/>q),<sp/>W(X<sp/>-<sp/>Y)<sp/>(mod<sp/>q).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>*X<sp/>+<sp/>*Y;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>*X<sp/>+<sp/>twice_mod<sp/>-<sp/>*Y;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*X++<sp/>=<sp/>(tx<sp/>&gt;=<sp/>twice_mod)<sp/>?<sp/>(tx<sp/>-<sp/>twice_mod)<sp/>:<sp/>tx;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Y++<sp/>=<sp/>MultiplyUIntModLazy&lt;64&gt;(ty,<sp/>W_op,<sp/>W_op_precon,<sp/>modulus);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>+=<sp/>(t<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>W_op<sp/>=<sp/>inv_root_of_unity_powers[root_index];</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>inv_n<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a3f409e865de8022c3ea069458b3913d6" kindref="member">InverseUIntMod</ref>(n,<sp/>modulus);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>inv_n_w<sp/>=<sp/><ref refid="namespacehetest_1_1utils_1a7e1e09f25d4ed5c4b8ed51fd0e7831e0" kindref="member">MultiplyUIntMod</ref>(inv_n,<sp/>W_op,<sp/>modulus);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/>X<sp/>=<sp/>operand;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t*<sp/>Y<sp/>=<sp/>X<sp/>+<sp/>(n<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>tx;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>ty;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>(n<sp/>&gt;&gt;<sp/>1);<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>*X<sp/>+<sp/>*Y;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx<sp/>&gt;=<sp/>twice_mod)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>-=<sp/>twice_mod;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ty<sp/>=<sp/>*X<sp/>+<sp/>twice_mod<sp/>-<sp/>*Y;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*X++<sp/>=<sp/>MultiplyUIntModLazy&lt;64&gt;(tx,<sp/>inv_n,<sp/>modulus);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*Y++<sp/>=<sp/>MultiplyUIntModLazy&lt;64&gt;(ty,<sp/>inv_n_w,<sp/>modulus);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(output_mod_factor<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reduce<sp/>from<sp/>[0,<sp/>2q)<sp/>to<sp/>[0,q)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operand[i]<sp/>&gt;=<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operand[i]<sp/>-=<sp/>modulus;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(operand[i]<sp/>&lt;<sp/>modulus,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Incorrect<sp/>modulus<sp/>reduction<sp/>in<sp/>InvNTT&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>operand[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>modulus);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacehetest_1_1utils_1af721dbd58c61bb7b9220c8bb315488a9" kindref="member">CheckNTTArguments</ref>(uint64_t<sp/>degree,<sp/>uint64_t<sp/>modulus)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>unused<sp/>parameter<sp/>warnings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)degree;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)modulus;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(<ref refid="namespacehetest_1_1utils_1a968364009ecc6add3849c161d7a1088f" kindref="member">IsPowerOfTwo</ref>(degree),</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;degree<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>degree<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>a<sp/>power<sp/>of<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(degree<sp/>&lt;=<sp/>(1<sp/>&lt;&lt;<sp/>NTT::NTTImpl::s_max_degree_bits),</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;degree<sp/>should<sp/>be<sp/>less<sp/>than<sp/>2^&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>NTT::NTTImpl::s_max_degree_bits<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>got<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>degree);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="utils-test_8hpp_1a89535bd3a3a7e4e8d10037287f44b363" kindref="member">UTILS_CHECK</ref>(modulus<sp/>%<sp/>(2<sp/>*<sp/>degree)<sp/>==<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;modulus<sp/>mod<sp/>2n<sp/>!=<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>utils</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hetest</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ymeng12/he-fpga-github/tests/test_utils/ntt.cpp"/>
  </compounddef>
</doxygen>
