diff --git a/CMakeLists.txt b/CMakeLists.txt
index 03d2b5da..c33d8299 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -218,15 +218,38 @@ set(SEAL_USE_INTEL_HEXL_OPTION_STR "Use Intel HEXL library")
 option(SEAL_USE_INTEL_HEXL ${SEAL_USE_INTEL_HEXL_OPTION_STR} OFF)
 message(STATUS "SEAL_USE_INTEL_HEXL: ${SEAL_USE_INTEL_HEXL}")

+# [option] SEAL_USE_INTEL_HEXL_FPGA (default: OFF)
+set(SEAL_USE_INTEL_HEXL_FPGA_OPTION_STR "Use Intel HEXL-FPGA library")
+option(SEAL_USE_INTEL_HEXL_FPGA ${SEAL_USE_INTEL_HEXL_FPGA_OPTION_STR} OFF)
+message(STATUS "SEAL_USE_INTEL_HEXL_FPGA: ${SEAL_USE_INTEL_HEXL_FPGA}")
+
+if(SEAL_USE_INTEL_HEXL_FPGA)
+    set(SEAL_USE_INTEL_HEXL ON CACHE BOOL "" FORCE)
+endif()
+
 if(SEAL_USE_INTEL_HEXL)
     if(SEAL_BUILD_DEPS)
         message(STATUS "Intel HEXL: download ...")
         seal_fetch_thirdparty_content(ExternalIntelHEXL)
+
+        if(SEAL_USE_INTEL_HEXL_FPGA)
+            message(STATUS "Intel HEXL-FPGA: download ...")
+            seal_fetch_thirdparty_content(ExternalIntelHEXLFPGA)
+        endif()
     else()
-        find_package(HEXL 1.2.3)
+        find_package(HEXL 1.2.4)
         if (NOT TARGET HEXL::hexl)
             message(FATAL_ERROR "Intel HEXL: not found")
         endif()
+
+        if(SEAL_USE_INTEL_HEXL_FPGA)
+            find_package(hexl-fpga 2.0)
+            if (NOT TARGET hexl-fpga::hexl-fpga)
+                message(FATAL_ERROR "Intel HEXL-FPGA: not found")
+            else()
+                add_library(hexl-fpga ALIAS hexl-fpga::hexl-fpga)
+            endif()
+        endif()
     endif()
 endif()

@@ -431,8 +454,16 @@ if(NOT BUILD_SHARED_LIBS)
                 target_link_libraries(seal INTERFACE ${HEXL_INTERFACE_LINK_OPTIONS})
             endif()
             seal_combine_archives(seal HEXL::hexl)
+
+            if(SEAL_USE_INTEL_HEXL_FPGA)
+                add_dependencies(seal hexl-fpga)
+                target_link_libraries(seal PUBLIC hexl-fpga)
+            endif()
         else()
             target_link_libraries(seal PUBLIC HEXL::hexl)
+            if(SEAL_USE_INTEL_HEXL_FPGA)
+                target_link_libraries(seal PUBLIC hexl-fpga)
+            endif()
         endif()
     endif()

@@ -480,6 +511,10 @@ else()
             target_link_libraries(seal_shared INTERFACE ${HEXL_INTERFACE_LINK_OPTIONS})
         endif()

+        if(SEAL_USE_INTEL_HEXL_FPGA)
+            target_link_libraries(seal_shared PRIVATE hexl-fpga)
+        endif()
+
         # Install shared HEXL library to installation directory
         install(DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
             DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_LIBRARY_PREFIX}
diff --git a/cmake/ExternalIntelHEXL.cmake b/cmake/ExternalIntelHEXL.cmake
index c1b8b420..efffe294 100644
--- a/cmake/ExternalIntelHEXL.cmake
+++ b/cmake/ExternalIntelHEXL.cmake
@@ -4,8 +4,8 @@
 FetchContent_Declare(
     hexl
     PREFIX hexl
-    GIT_REPOSITORY https://github.com/intel/hexl
-    GIT_TAG 0858760 # 1.2.3
+    GIT_REPOSITORY https://github.com/intel/hexl.git
+    GIT_TAG v1.2.4
 )
 FetchContent_GetProperties(hexl)

@@ -18,6 +18,10 @@ if(NOT hexl_POPULATED)
     set(HEXL_COVERAGE OFF CACHE BOOL "" FORCE)
     set(HEXL_TESTING OFF CACHE BOOL "" FORCE)
     set(HEXL_SHARED_LIB ${BUILD_SHARED_LIBS} CACHE BOOL "" FORCE)
+    set(HEXL_EXPERIMENTAL ${HEXL_EXPERIMENTAL} CACHE BOOL "" FORCE)
+    if(SEAL_USE_INTEL_HEXL_FPGA)
+        set(HEXL_FPGA_COMPATIBILITY "2" CACHE SRING "Keyswitch on FPGA" FORCE)
+    endif()
     set(EXCLUDE_FROM_ALL TRUE)

     mark_as_advanced(BUILD_HEXL)
diff --git a/cmake/ExternalIntelHEXLFPGA.cmake b/cmake/ExternalIntelHEXLFPGA.cmake
new file mode 100644
index 00000000..57cfe40f
--- /dev/null
+++ b/cmake/ExternalIntelHEXLFPGA.cmake
@@ -0,0 +1,29 @@
+# Copyright (c) Microsoft Corporation. All rights reserved.
+# Licensed under the MIT license.
+
+FetchContent_Declare(
+    hexl-fpga
+    PREFIX hexl-fpga
+    GIT_REPOSITORY https://github.com/intel/hexl-fpga.git
+    GIT_TAG v2.0-rc1
+)
+FetchContent_GetProperties(hexl-fpga)
+
+if(NOT hexl-fpga_POPULATED)
+    FetchContent_Populate(hexl-fpga)
+    set(CMAKE_C_COMPILER ${CMAKE_C_COMPILER} CACHE STRING "" FORCE)
+    set(CMAKE_CXX_COMPILER ${CMAKE_CXX_COMPILER} CACHE STRING "" FORCE)
+    set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING "" FORCE)
+    set(EXCLUDE_FROM_ALL TRUE)
+
+    mark_as_advanced(BUILD_HEXL-FPGA)
+    mark_as_advanced(INSTALL_HEXL-FPGA)
+    mark_as_advanced(FETCHCONTENT_SOURCE_DIR_HEXL-FPGA)
+    mark_as_advanced(FETCHCONTENT_UPDATES_DISCONNECTED_HEXL-FPGA)
+
+    add_subdirectory(
+        ${hexl-fpga_SOURCE_DIR}
+        ${hexl-fpga_SOURCE_DIR}/../hexl-fpga-build
+        EXCLUDE_FROM_ALL
+    )
+endif()
diff --git a/cmake/SEALConfig.cmake.in b/cmake/SEALConfig.cmake.in
index a84fffb1..234e51b4 100644
--- a/cmake/SEALConfig.cmake.in
+++ b/cmake/SEALConfig.cmake.in
@@ -34,6 +34,7 @@
 #   SEAL_USE_ZLIB : Set to non-zero value if library is compiled with ZLIB support
 #   SEAL_USE_ZSTD : Set to non-zero value if library is compiled with Zstandard support
 #   SEAL_USE_INTEL_HEXL: Set to non-zero value if library is compiled with Intel HEXL support
+#   SEAL_USE_INTEL_HEXL_FPGA: Set to non-zero value if library is compiled with Intel HEXL-FPGA support
 #   SEAL_CARRY_DEPS : Set to non-zero value if library is configured with SEAL_BUILD_DEPS=ON and carries dependencies

 @PACKAGE_INIT@
@@ -78,6 +79,7 @@ set(SEAL_USE_MSGSL @SEAL_USE_MSGSL@)
 set(SEAL_USE_ZLIB @SEAL_USE_ZLIB@)
 set(SEAL_USE_ZSTD @SEAL_USE_ZSTD@)
 set(SEAL_USE_INTEL_HEXL @SEAL_USE_INTEL_HEXL@)
+set(SEAL_USE_INTEL_HEXL_FPGA @SEAL_USE_INTEL_HEXL_FPGA@)
 set(SEAL_CARRY_DEPS @SEAL_BUILD_DEPS@)

 # If SEAL does not carry dependencies, we must look for them
@@ -104,6 +106,9 @@ if(NOT SEAL_CARRY_DEPS)
     if(SEAL_USE_INTEL_HEXL)
         seal_find_dependency(HEXL)
     endif()
+    if(SEAL_USE_INTEL_HEXL_FPGA)
+        seal_find_dependency(hexl-fpga)
+    endif()
 endif()

 # Add the current directory to the module search path
diff --git a/native/src/seal/encryptionparams.h b/native/src/seal/encryptionparams.h
index 9e1fbe48..20849277 100644
--- a/native/src/seal/encryptionparams.h
+++ b/native/src/seal/encryptionparams.h
@@ -202,6 +202,12 @@ namespace seal

             coeff_modulus_ = coeff_modulus;

+            coeff_modulus_values_.clear();
+            for (const auto &modulus : coeff_modulus)
+            {
+                coeff_modulus_values_.push_back(modulus.value());
+            }
+
             // Re-compute the parms_id
             compute_parms_id();
         }
@@ -290,6 +296,14 @@ namespace seal
             return coeff_modulus_;
         }

+        /**
+        Returns a const reference to the currently set coefficient modulus parameter values.
+        */
+        SEAL_NODISCARD inline auto coeff_modulus_values() const noexcept -> const std::vector<uint64_t> &
+        {
+            return coeff_modulus_values_;
+        }
+
         /**
         Returns a const reference to the currently set plaintext modulus parameter.
         */
@@ -497,6 +511,8 @@ namespace seal

         std::vector<Modulus> coeff_modulus_{};

+        std::vector<uint64_t> coeff_modulus_values_{};
+
         std::shared_ptr<UniformRandomGeneratorFactory> random_generator_{ nullptr };

         Modulus plain_modulus_{};
diff --git a/native/src/seal/evaluator.cpp b/native/src/seal/evaluator.cpp
index 93768bee..59d49a70 100644
--- a/native/src/seal/evaluator.cpp
+++ b/native/src/seal/evaluator.cpp
@@ -12,6 +12,9 @@
 #include <algorithm>
 #include <cmath>
 #include <functional>
+#ifdef SEAL_USE_INTEL_HEXL
+#include "hexl/hexl.hpp"
+#endif

 using namespace std;
 using namespace seal::util;
@@ -2450,6 +2453,38 @@ namespace seal
         auto &key_vector = kswitch_keys.data()[kswitch_keys_index];
         size_t key_component_count = key_vector[0].data().size();

+#ifdef SEAL_USE_INTEL_HEXL
+        if (scheme == scheme_type::ckks)
+        {
+            const uint64_t *t_target_iter_ptr = &(*target_iter)[0];
+
+            auto cache_key = &key_vector[0];
+            if (key_vector_cache.find(cache_key) == key_vector_cache.end()) {
+                std::vector<const uint64_t *> key_vector_data;
+                for (auto &curr_key : key_vector) {
+                    auto &curr_key_cipher = curr_key.data();
+                    auto curr_key_cipher_data = curr_key_cipher.data();
+                    key_vector_data.push_back(curr_key_cipher_data);
+                }
+                const_cast<Evaluator *>(this)->key_vector_cache.emplace(cache_key, key_vector_data);
+            }
+
+            std::vector<uint64_t> key_modswitch_factors;
+            for (size_t l = 0; l < key_modulus_size; ++l) {
+                auto factor = modswitch_factors[l];
+                auto operand = factor.operand;
+                key_modswitch_factors.push_back(operand);
+            }
+
+            intel::hexl::KeySwitch(
+                encrypted.data(), t_target_iter_ptr, coeff_count, decomp_modulus_size, key_modulus_size,
+                rns_modulus_size, key_component_count, key_parms.coeff_modulus_values().data(),
+                const_cast<Evaluator *>(this)->key_vector_cache[cache_key].data(),
+                key_modswitch_factors.data());
+
+            return;
+        }
+#else
         // Check only the used component in KSwitchKeys.
         for (auto &each_key : key_vector)
         {
@@ -2458,6 +2493,7 @@ namespace seal
                 throw invalid_argument("kswitch_keys is not valid for encryption parameters");
             }
         }
+#endif

         // Create a copy of target_iter
         SEAL_ALLOCATE_GET_RNS_ITER(t_target, coeff_count, decomp_modulus_size, pool);
diff --git a/native/src/seal/evaluator.h b/native/src/seal/evaluator.h
index 33bc3c7d..ddeace56 100644
--- a/native/src/seal/evaluator.h
+++ b/native/src/seal/evaluator.h
@@ -1266,5 +1266,7 @@ namespace seal
         void multiply_plain_ntt(Ciphertext &encrypted_ntt, const Plaintext &plain_ntt) const;

         SEALContext context_;
+
+        std::unordered_map<const PublicKey *, std::vector<const uint64_t *>> key_vector_cache;
     };
 } // namespace seal
