<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="test__dyadic__multiply_8cpp" kind="file">
    <compoundname>test_dyadic_multiply.cpp</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">vector</includes>
    <includes local="yes">gtest/gtest.h</includes>
    <includes refid="hexl-fpga_8h" local="yes">hexl-fpga.h</includes>
    <incdepgraph>
      <node id="151">
        <label>cstdint</label>
      </node>
      <node id="150">
        <label>hexl-fpga.h</label>
        <link refid="hexl-fpga_8h"/>
        <childnode refid="151" relation="include">
        </childnode>
      </node>
      <node id="148">
        <label>vector</label>
      </node>
      <node id="149">
        <label>gtest/gtest.h</label>
      </node>
      <node id="147">
        <label>cstdlib</label>
      </node>
      <node id="146">
        <label>test_dyadic_multiply.cpp</label>
        <link refid="test_dyadic_multiply.cpp"/>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classdyadic__multiply__test" prot="public">dyadic_multiply_test</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, p512_m1_b1_16)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>p512_m1_b1_16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="149" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="149" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a2ffd8257211d7a3c7f7650a8878c48b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, p1024_m1_b1_16)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>p1024_m1_b1_16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="158" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="158" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a939fe273df397f5efa0bb38e34722fe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, p2048_m1_b1_16)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>p2048_m1_b1_16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="167" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="167" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a1fc7ad2a5f246cfee7295cee5e158cb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, p4096_m2_b1_16)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>p4096_m2_b1_16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="176" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a724c45f9ac855da82c736a017c7e0424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, p8192_m4_b1_16)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>p8192_m4_b1_16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="185" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="185" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a568845bbd4ac702a2ddb16e040b5a494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, p16384_m7_b1_16)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>p16384_m7_b1_16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="194" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="194" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a74f1cda2f5ac07cf644ae4606c47fd99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, matrix_p16384_m7_b1_16x8)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>matrix_p16384_m7_b1_16x8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="203" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="203" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a89b94fa9015f85f58a641ddd46d43233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, matrix_p16384_m7_b1_256x8)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>matrix_p16384_m7_b1_256x8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="214" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="214" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a854ea93ac2f5072d127a6d824f7ddbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, matrix_p16384_m7_b1_16x16)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>matrix_p16384_m7_b1_16x16</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="225" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="225" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1af0752728033b9ec2395d4ca218d93045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, p32768_m14_b1_2)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>p32768_m14_b1_2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="236" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="236" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a43b34dac88b8835c96df5aa10f735e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, matrix_p32768_m14_b1_8x8)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>matrix_p32768_m14_b1_8x8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="245" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="245" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a6200ce4c0579b6676504ad542af60cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, matrix_p32768_m14_b1_16x8)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>matrix_p32768_m14_b1_16x8</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="256" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="256" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a86a19425077c1f6617268d0da46b3eb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, set_worksize_crash)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>set_worksize_crash</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="267" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="267" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1aa96d02614011060b0e815a86484ec1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, m0_death)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>m0_death</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="273" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="273" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="test__dyadic__multiply_8cpp_1a704cc5c9b62658f4cd09516a72ee059c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(dyadic_multiply_test, coeff_count0_death)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref></type>
        </param>
        <param>
          <type>coeff_count0_death</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" line="286" column="1" bodyfile="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp" bodystart="286" bodyend="297"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>Apache-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hexl-fpga_8h" kindref="compound">hexl-fpga.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="classdyadic__multiply__test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">test_dyadic_multiply</ref>(uint64_t<sp/>num_dyadic_multiply,<sp/>uint64_t<sp/>num_moduli,</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>death<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__test_1aed73bb19b0e21ab956ee635db8e783c3" kindref="member">test_matrix_dyadic_multiply</ref>(uint64_t<sp/>n_rows,<sp/>uint64_t<sp/>n_columns,</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli,<sp/>uint64_t<sp/>coeff_count);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__test_1a4f423f1c9b8b1821ce865b53488708a3" kindref="member">TestBody</ref>()</highlight><highlight class="keyword"><sp/>override</highlight><highlight class="normal">{};</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setup_dyadic_io(uint64_t<sp/>num_dyadic_multiply,<sp/>uint64_t<sp/>num_moduli,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>input_size;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>moduli;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>op1;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>op2;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>exp_out;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dyadic_multiply_test::setup_dyadic_io(uint64_t<sp/>num_dyadic_multiply,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="bench__dyadic__multiply_8cpp_1a94cbf59cad79634589387a30784ed78d" kindref="member">num_moduli</ref>,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>num_dyadic_multiply;<sp/>b++)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>num_moduli;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moduli.push_back((b<sp/>+<sp/>m<sp/>+<sp/>1)<sp/>*<sp/>10);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>num_moduli;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op1.push_back(b<sp/>+<sp/>i<sp/>+<sp/>1<sp/>+<sp/>m<sp/>*<sp/>coeff_count);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op2.push_back(b<sp/>+<sp/>i<sp/>+<sp/>2<sp/>+<sp/>m<sp/>*<sp/>coeff_count);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>num_moduli;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op1.push_back(b<sp/>+<sp/>i<sp/>+<sp/>11<sp/>+<sp/>m<sp/>*<sp/>coeff_count);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op2.push_back(b<sp/>+<sp/>i<sp/>+<sp/>22<sp/>+<sp/>m<sp/>*<sp/>coeff_count);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>num_moduli;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>poly0_offset<sp/>=</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2<sp/>+<sp/>m<sp/>*<sp/>coeff_count;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>m_offset<sp/>=<sp/>b<sp/>*<sp/>num_moduli<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>a<sp/>=<sp/>op1[poly0_offset<sp/>+<sp/>i]<sp/>*<sp/>op2[poly0_offset<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_out.push_back(a<sp/>%<sp/>moduli[m_offset]);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>num_moduli;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>poly0_offset<sp/>=</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2<sp/>+<sp/>m<sp/>*<sp/>coeff_count;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>poly1_offset<sp/>=<sp/>b<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2<sp/>+</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m<sp/>+<sp/>num_moduli)<sp/>*<sp/>coeff_count;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>m_offset<sp/>=<sp/>b<sp/>*<sp/>num_moduli<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>x<sp/>=<sp/>op1[poly0_offset<sp/>+<sp/>i]<sp/>*<sp/>op2[poly1_offset<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>y<sp/>=<sp/>op1[poly1_offset<sp/>+<sp/>i]<sp/>*<sp/>op2[poly0_offset<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_out.push_back((x<sp/>+<sp/>y)<sp/>%<sp/>moduli[m_offset]);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>num_moduli;<sp/>m++)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>poly1_offset<sp/>=<sp/>b<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2<sp/>+</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m<sp/>+<sp/>num_moduli)<sp/>*<sp/>coeff_count;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>m_offset<sp/>=<sp/>b<sp/>*<sp/>num_moduli<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>coeff_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>x<sp/>=<sp/>op1[poly1_offset<sp/>+<sp/>i]<sp/>*<sp/>op2[poly1_offset<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exp_out.push_back(x<sp/>%<sp/>moduli[m_offset]);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">dyadic_multiply_test::test_dyadic_multiply</ref>(uint64_t<sp/>num_dyadic_multiply,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>death)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>setup_dyadic_io(num_dyadic_multiply,<sp/>num_moduli,<sp/>coeff_count);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/><ref refid="bench__dyadic__multiply_8cpp_1a9df79bfc3d20b59bcaf8d6721d1b8b82" kindref="member">out</ref>(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_dyadic_multiply<sp/>*<sp/>3<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count,<sp/>0);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1a0721fea3151425a86da2201107e3ddcc" kindref="member">intel::hexl::set_worksize_DyadicMultiply</ref>(num_dyadic_multiply);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>num_dyadic_multiply;<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pout<sp/>=<sp/>&amp;<ref refid="bench__dyadic__multiply_8cpp_1a9df79bfc3d20b59bcaf8d6721d1b8b82" kindref="member">out</ref>[0]<sp/>+<sp/>n<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pop1<sp/>=<sp/>&amp;op1[0]<sp/>+<sp/>n<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pop2<sp/>=<sp/>&amp;op2[0]<sp/>+<sp/>n<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pmoduli<sp/>=<sp/>&amp;moduli[0]<sp/>+<sp/>n<sp/>*<sp/>num_moduli;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1ae4e26f2cb97a43a2b81fe8643b6edf17" kindref="member">intel::hexl::DyadicMultiply</ref>(pout,<sp/>pop1,<sp/>pop2,<sp/>coeff_count,<sp/>pmoduli,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_moduli);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1a638ef00009ae573955d1138b9fb03363" kindref="member">intel::hexl::DyadicMultiplyCompleted</ref>();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!death)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(<ref refid="bench__dyadic__multiply_8cpp_1a9df79bfc3d20b59bcaf8d6721d1b8b82" kindref="member">out</ref>,<sp/>exp_out);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdyadic__multiply__test_1aed73bb19b0e21ab956ee635db8e783c3" kindref="member">dyadic_multiply_test::test_matrix_dyadic_multiply</ref>(uint64_t<sp/>n_rows,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>n_columns,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>setup_dyadic_io(n_columns,<sp/>num_moduli,<sp/>coeff_count);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;uint64_t&gt;&gt;<sp/><ref refid="bench__dyadic__multiply_8cpp_1a9df79bfc3d20b59bcaf8d6721d1b8b82" kindref="member">out</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>n_rows;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>out_r(n_columns<sp/>*<sp/>3<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.emplace_back(out_r);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>block<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1a0721fea3151425a86da2201107e3ddcc" kindref="member">intel::hexl::set_worksize_DyadicMultiply</ref>(n_rows<sp/>*<sp/>n_columns);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>n_rows;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>(n_columns<sp/>+<sp/>block<sp/>-<sp/>1)<sp/>/<sp/>block;<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>b<sp/>=<sp/>0;<sp/>b<sp/>&lt;<sp/>block;<sp/>b++)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pout<sp/>=</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;out[r][0]<sp/>+<sp/>(c<sp/>*<sp/>block<sp/>+<sp/>b)<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pop1<sp/>=</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;op1[0]<sp/>+<sp/>(c<sp/>*<sp/>block<sp/>+<sp/>b)<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pop2<sp/>=</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;op2[0]<sp/>+<sp/>(c<sp/>*<sp/>block<sp/>+<sp/>b)<sp/>*<sp/>num_moduli<sp/>*<sp/>coeff_count<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t*<sp/>pmoduli<sp/>=<sp/>&amp;moduli[0]<sp/>+<sp/>(c<sp/>*<sp/>block<sp/>+<sp/>b)<sp/>*<sp/>num_moduli;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1ae4e26f2cb97a43a2b81fe8643b6edf17" kindref="member">intel::hexl::DyadicMultiply</ref>(pout,<sp/>pop1,<sp/>pop2,<sp/>coeff_count,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pmoduli,<sp/>num_moduli);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceintel_1_1hexl_1a638ef00009ae573955d1138b9fb03363" kindref="member">intel::hexl::DyadicMultiplyCompleted</ref>();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>r<sp/>=<sp/>0;<sp/>r<sp/>&lt;<sp/>n_rows;<sp/>r++)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(out[r],<sp/>exp_out);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>p512_m1_b1_16)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>512<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">test_dyadic_multiply</ref>(num_dyadic_multiply,<sp/>num_moduli,<sp/>coeff_count);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>p1024_m1_b1_16)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>1024<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">test_dyadic_multiply</ref>(num_dyadic_multiply,<sp/>num_moduli,<sp/>coeff_count);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>p2048_m1_b1_16)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>2048<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">test_dyadic_multiply</ref>(num_dyadic_multiply,<sp/>num_moduli,<sp/>coeff_count);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>p4096_m2_b1_16)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>4096<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">test_dyadic_multiply</ref>(num_dyadic_multiply,<sp/>num_moduli,<sp/>coeff_count);</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>p8192_m4_b1_16)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>8192<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">test_dyadic_multiply</ref>(num_dyadic_multiply,<sp/>num_moduli,<sp/>coeff_count);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>p16384_m7_b1_16)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>16384<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">test_dyadic_multiply</ref>(num_dyadic_multiply,<sp/>num_moduli,<sp/>coeff_count);</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>matrix_p16384_m7_b1_16x8)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>16384<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_rows<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_columns<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1aed73bb19b0e21ab956ee635db8e783c3" kindref="member">test_matrix_dyadic_multiply</ref>(n_rows,<sp/>n_columns,<sp/>num_moduli,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeff_count);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>matrix_p16384_m7_b1_256x8)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>16384<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_rows<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_columns<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1aed73bb19b0e21ab956ee635db8e783c3" kindref="member">test_matrix_dyadic_multiply</ref>(n_rows,<sp/>n_columns,<sp/>num_moduli,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeff_count);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>matrix_p16384_m7_b1_16x16)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>16384<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_rows<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_columns<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1aed73bb19b0e21ab956ee635db8e783c3" kindref="member">test_matrix_dyadic_multiply</ref>(n_rows,<sp/>n_columns,<sp/>num_moduli,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeff_count);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>p32768_m14_b1_2)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>32768<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">test_dyadic_multiply</ref>(num_dyadic_multiply,<sp/>num_moduli,<sp/>coeff_count);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>matrix_p32768_m14_b1_8x8)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>32768<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_rows<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_columns<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1aed73bb19b0e21ab956ee635db8e783c3" kindref="member">test_matrix_dyadic_multiply</ref>(n_rows,<sp/>n_columns,<sp/>num_moduli,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeff_count);</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>matrix_p32768_m14_b1_16x8)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>32768<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_rows<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>n_columns<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>mult.<ref refid="classdyadic__multiply__test_1aed73bb19b0e21ab956ee635db8e783c3" kindref="member">test_matrix_dyadic_multiply</ref>(n_rows,<sp/>n_columns,<sp/>num_moduli,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeff_count);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>set_worksize_crash)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FPGA_DEBUG</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DEATH(<ref refid="namespaceintel_1_1hexl_1a0721fea3151425a86da2201107e3ddcc" kindref="member">intel::hexl::set_worksize_DyadicMultiply</ref>(0),<sp/></highlight><highlight class="stringliteral">&quot;Assertion&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>m0_death)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FPGA_DEBUG</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>8192;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DEATH(mult.<ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">test_dyadic_multiply</ref>(num_dyadic_multiply,<sp/>num_moduli,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeff_count,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Assertion&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><ref refid="test__dyadic__multiply_8cpp_1aedb5ee3bb161473f1d3e70ea9f9a00b9" kindref="member">TEST_F</ref>(<ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref>,<sp/>coeff_count0_death)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FPGA_DEBUG</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>coeff_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_moduli<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>num_dyadic_multiply<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdyadic__multiply__test" kindref="compound">dyadic_multiply_test</ref><sp/>mult;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_DEATH(mult.<ref refid="classdyadic__multiply__test_1a30c5897858c8434401ae46efc05d53b0" kindref="member">test_dyadic_multiply</ref>(num_dyadic_multiply,<sp/>num_moduli,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeff_count,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Assertion&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ymeng12/he-fpga-github/tests/test_dyadic_multiply.cpp"/>
  </compounddef>
</doxygen>
