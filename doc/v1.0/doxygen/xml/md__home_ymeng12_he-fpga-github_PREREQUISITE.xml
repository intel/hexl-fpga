<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="md__home_ymeng12_he-fpga-github_PREREQUISITE" kind="page">
    <compoundname>md__home_ymeng12_he-fpga-github_PREREQUISITE</compoundname>
    <title>Prerequisite -- Environment Setup for Using Intel FPGA Acceleration Card</title>
    <detaileddescription>
<para><heading level="2">Intel Acceleration Stack</heading>
</para><para>There are two types of Intel Acceleration Stack (version 2.0.1), namely, the <ulink url="https://www.intel.com/content/www/us/en/programmable/f/download/accelerator/license-agreement-pac-d5005.html?swcode=WWW-SWD-IAS-RTE-201">Acceleration Stack for Runtime</ulink> and the <ulink url="https://www.intel.com/content/altera-www/global/en_us/index/f/download/accelerator/pac-d5005-thank-you.html?swcode=WWW-SWD-IAS-DEV-201">Acceleration Stack for Development</ulink>. The runtime stack provides a smaller footprint package for software development of runtime host application. It includes Intel FPGA Runtime Environment (RTE) for OpenCL but does not include Intel Quartus Prime; thus, it assumes that the FPGA bitstreams are available. The development stack allows for accelerator function development using the Intel Quartus Prime Pro Edition software (required and included). Additionally, it comes with the Intel FPGA Software Development Kit (SDK) for OpenCL and the Acceleration Stack. <linebreak/>
</para><para>The Intel Acceleration Stack for development (<computeroutput>d5005_pac_ias_2_0_1_pv_dev_installer.tar.gz</computeroutput>) is encouraged and required to reap the full benefits of Intel HEXL for FPGA, especially before attempting to build the FPGA kernels and if intended usage of Intel HEXL for FPGA includes development contributions. Download, read more detailed installation instructions, updates and related additional resources at <ulink url="https://www.intel.com/content/www/us/en/programmable/products/boards_and_kits/dev-kits/altera/intel-fpga-pac-d5005/getting-started.html">Intel Acceleration Stack link</ulink>. <linebreak/>
</para><para>Note: Even though the validated operating system is RHEL 7.6, we used CentOS 7.9 without issues.<linebreak/>
</para><para><heading level="2">Intel Quartus Prime Pro Edition</heading>
</para><para>Quartus Prime version 19.2 is installed in the Acceleration Stack installation. For Intel HEXL for FPGA, the installation of Quartus Prime version 20.3 is required. <ulink url="https://fpgasoftware.intel.com/20.3/?edition=pro">Download the complete version</ulink> and follow the instructions below. <linebreak/>
</para><para>``` tar xvf Quartus-pro-20.3.0.158-linux-complete.tar ./setup_pro.sh ```</para><para>Use the following configuration:<linebreak/>
</para><para>``` Select the components you want to install:</para><para>Quartus Prime Pro Edition [Y/n]: Y</para><para>ModelSim <ndash/> Intel FPGA Starter Edition (Free) (17169.4MB) [Y/n]: n</para><para>ModelSim <ndash/> Intel FPGA Edition (Free) (17169.4MB) [Y/n]: n</para><para>Intel High Level Synthesis Compiler (2481.9MB) [Y/n]: Y</para><para>DSP Builder Pro Edition (185.8MB) [Y/n]: n</para><para>Intel FPGA SDK for OpenCL Pro Edition (1822.6MB) [Y/n]: Y ```</para><para>Note that the installation of Intel HLS compiler is required to compile the smaller IP modules that support the larger kernels with modular addition and modular multiplication arithmetic.<linebreak/>
</para><para><heading level="2">Intel OneAPI</heading>
</para><para>Install the oneAPI Toolkit from the following site: <linebreak/>
</para><para><ulink url="https://software.intel.com/content/www/us/en/develop/articles/installation-guide-for-intel-oneapi-toolkits.html">Installation Guide for Intel OneAPI Toolkits</ulink>.<linebreak/>
</para><para>More information on the FPGA related components can be found on this <ulink url="https://software.intel.com/content/www/us/en/develop/tools/oneapi/components/fpga.html#gs.6nbq2b">here</ulink>. <linebreak/>
</para><para>Instructions on direct installation via yum located at <ulink url="https://software.intel.com/content/www/us/en/develop/documentation/installation-guide-for-intel-oneapi-toolkits-linux/top/installation/install-using-package-managers/yum-dnf-zypper.html">https://software.intel.com/content/www/us/en/develop/documentation/installation-guide-for-intel-oneapi-toolkits-linux/top/installation/install-using-package-managers/yum-dnf-zypper.html</ulink>. <linebreak/>
</para><para>``` sudo yum install intel-basekit sudo yum install intel-oneapi-intelfpgadpcpp-custom-platforms-quartus20.3 ```</para><para><heading level="2">Initializing the FPGA Environment</heading>
</para><para>Upon completion of the installation of the FPGA software stack, the next step is to initialize the environment for FPGA runtime and development. We provide below an example script that automates this process, in particular for the combination of software versions installed. <linebreak/>
</para><para>``` <heading level="1">init_env.sh</heading>
</para><para>export QUARTUS_HOME=&quot;/disk1/tools/intelFPGA_pro/19.2/quartus&quot; export OPAE_PLATFORM_ROOT=&quot;/disk1/tools/inteldevstack/d5005_ias_2_0_1_b237&quot;</para><para>export AOCL_BOARD_PACKAGE_ROOT=&quot;/disk1/tools/inteldevstack/d5005_ias_2_0_1_b237/opencl/opencl_bsp&quot; if ls /dev/intel-fpga-* 1&gt; /dev/null 2&gt;&amp;1; then source $AOCL_BOARD_PACKAGE_ROOT/linux64/libexec/setup_permissions.sh &gt;&gt; /dev/null fi</para><para>OPAE_PLATFORM_BIN=&quot;/disk1/tools/inteldevstack/d5005_ias_2_0_1_b237/bin&quot; if [[ &quot;:${PATH}:&quot; = *&quot;:${OPAE_PLATFORM_BIN}:&quot;* ]] ;then echo &quot;\$OPAE_PLATFORM_ROOT/bin is in PATH already&quot; else echo &quot;Adding \$OPAE_PLATFORM_ROOT/bin to PATH&quot; export PATH=&quot;${PATH}&quot;:&quot;${OPAE_PLATFORM_BIN}&quot; fi</para><para>echo export AOCL_BOARD_PACKAGE_ROOT=&quot;/opt/intel/oneapi/intelfpgadpcpp/latest/board/intel_s10sx_pac&quot; export AOCL_BOARD_PACKAGE_ROOT=&quot;/opt/intel/oneapi/intelfpgadpcpp/latest/board/intel_s10sx_pac&quot; if ls /dev/intel-fpga-* 1&gt; /dev/null 2&gt;&amp;1; then echo source $AOCL_BOARD_PACKAGE_ROOT/linux64/libexec/setup_permissions.sh source $AOCL_BOARD_PACKAGE_ROOT/linux64/libexec/setup_permissions.sh &gt;&gt; /dev/null fi</para><para>echo export INTELFPGAOCLSDKROOT=&quot;/disk1/tools/intelFPGA_pro/20.3/hld&quot; export INTELFPGAOCLSDKROOT=&quot;/disk1/tools/intelFPGA_pro/20.3/hld&quot;</para><para><heading level="1">Enable Backwards Compatibility with older BSP</heading>
</para><para>export ACL_ACDS_VERSION_OVERRIDE=&quot;19.2&quot; export QUARTUS_ROOTDIR_OVERRIDE=&quot;/disk1/tools/intelFPGA_pro/quartus_19.2.0b57/quartus&quot;</para><para>echo export ALTERAOCLSDKROOT=$INTELFPGAOCLSDKROOT export ALTERAOCLSDKROOT=$INTELFPGAOCLSDKROOT export PAC_DMA_WORK_THREAD=yes</para><para>QUARTUS_BIN=&quot;/disk1/tools/intelFPGA_pro/20.3/quartus/bin&quot; if [[ &quot;:${PATH}:&quot; = *&quot;:${QUARTUS_BIN}:&quot;* ]] ;then echo &quot;\$QUARTUS_HOME/bin is in PATH already&quot; else echo &quot;Adding \$QUARTUS_HOME/bin to PATH&quot; export PATH=&quot;${QUARTUS_BIN}&quot;:&quot;${PATH}&quot; fi</para><para>export AOCL_BOARD_PACKAGE_ROOT=/opt/intel/oneapi/intelfpgadpcpp/latest/board/intel_s10sx_pac source $INTELFPGAOCLSDKROOT/init_opencl.sh &gt;&gt; /dev/null</para><para>aocl initialize acl0 pac_s10_usm ```</para><para>The script above needs to be modified to reflect the real paths where the installation have been placed. This initialization process requires sudo (administrator) privileges. The OneAPI <computeroutput>AOCL_BOARD_PACKAGE_ROOT</computeroutput> variable value may differ from the example, depending from the source package, which could be <computeroutput>AOCL_BOARD_PACKAGE_ROOT="/opt/intel/oneapi/compiler/2021.3.0/linux/lib/oclfpga/board/intel_s10sx_pac</computeroutput>. Try <computeroutput>locate intel_s10sx_pac</computeroutput> to find out the actual path.</para><para><heading level="3">Fix Permissions on /dev Files</heading>
</para><para>The PAC D5005 requires sudo access with default permissions. This needs to be modified at least once during installation. The unmodified version of <computeroutput>init_env.sh</computeroutput> performs this step every time it is called, but that requires all users to have sudo access to source <computeroutput>init_env.sh</computeroutput>. Instead, run the permission setting script on its own after modifying <computeroutput>init_env.sh</computeroutput>.</para><para>``` $ source $AOCL_BOARD_PACKAGE_ROOT/linux64/libexec/setup_permissions.sh Configuring locked memory setting Configuring udev rules for intel-fpga device permission Configuring system with 2048 2M hugepages Finished setup_permissions.sh script. All configuration settings are persistent. ``` </para>    </detaileddescription>
  </compounddef>
</doxygen>
